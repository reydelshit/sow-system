
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import javax.swing.*;
import javax.swing.table.TableColumnModel;
import org.knowm.xchart.*;
import org.knowm.xchart.style.*;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Reydel
 */
public class OPEMANAGER extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    CardLayout cardLayout;

    private final NOTIFICATIONMODAL notificationModal;

    private JPanel chartPanel;
    private JPanel pieChartPanel;
    private JPanel barGraphForCulled;

    public OPEMANAGER() {
        conn = DBConnection.getConnection();
        initComponents();

        notificationModal = new NOTIFICATIONMODAL();
        notificationModal.setVisible(false);

        BREEDING_RETRIEVE_BREEDING_DETAILS();
        WARNING_FETCH_EARTAG();
        CULLED_FETCH_EARTAG();

        cardLayout = (CardLayout) (PAGES.getLayout());

        DISPLAYCHART();
        PIE_CHART();
        BAR_GRAPH();

        WARNING_SOW_LIST_WARNING_SOW.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                JTable table = (JTable) evt.getSource();
                int row = table.getSelectedRow();
                int eartag = Integer.parseInt(table.getValueAt(row, 0).toString());
                try {
                    DefaultTableModel model = new DefaultTableModel();
                    String warningSowsDetailsQuery = "SELECT * FROM farrowing_records WHERE eartag = ?";
                    pst = conn.prepareStatement(warningSowsDetailsQuery);
                    pst.setInt(1, eartag);
                    rs = pst.executeQuery();
                    model.addColumn("Female");
                    model.addColumn("Male");
                    model.addColumn("Total");
                    model.addColumn("Mortality");
                    model.addColumn("Remarks");
                    model.addColumn("Due");
                    model.addColumn("Actual");

                    while (rs.next()) {

                        int femalePiglets = rs.getInt("female_piglets");
                        int malePiglets = rs.getInt("male_piglets");
                        int totalPiglets = rs.getInt("total_piglets");
                        int mortality = rs.getInt("mortality");
                        String remarks = rs.getString("remarks");
                        Date farrowingDueDate = rs.getDate("farrowing_duedate");
                        Date farrowingActualDate = rs.getDate("farrowing_actualdate");
                        model.addRow(new Object[]{femalePiglets, malePiglets, totalPiglets, mortality, remarks, farrowingDueDate, farrowingActualDate});
                    }
                    if (WARNING_SOW_DETAILS != null) {
                        WARNING_SOW_DETAILS.setModel(model);
                        WARNING_FORCULLED_LABEL.setText(String.valueOf(eartag));
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
        });

        LIST_OF_SOW_DROPDOWN.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                BREEDING_RETRIEVE_SOW_BY_CLASSIFICATION();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        rSButtonHover1 = new rojeru_san.complementos.RSButtonHover();
        rSButtonHover2 = new rojeru_san.complementos.RSButtonHover();
        rSButtonHover3 = new rojeru_san.complementos.RSButtonHover();
        rSButtonHover4 = new rojeru_san.complementos.RSButtonHover();
        jLabel41 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        rSButtonHover5 = new rojeru_san.complementos.RSButtonHover();
        PAGES = new javax.swing.JPanel();
        MAIN_PANEL = new javax.swing.JPanel();
        CHART_PANEL_REG_SOW = new javax.swing.JPanel();
        PANEL_PIE_CHART = new javax.swing.JPanel();
        OPEMANAGER_BAR_GRAPH = new javax.swing.JPanel();
        VIEW_RECORDS = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        PERFORMANCE_FARROWING_TABLE = new rojeru_san.complementos.RSTableMetro();
        jScrollPane7 = new javax.swing.JScrollPane();
        PERFORMANCE_WEANING_TABLE = new rojeru_san.complementos.RSTableMetro();
        jScrollPane14 = new javax.swing.JScrollPane();
        PERFORMANCE_BREEDING_TABLE = new rojeru_san.complementos.RSTableMetro();
        PERFORMANCE_SEARCHFIELD = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        rSButtonHover16 = new rojeru_san.complementos.RSButtonHover();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        rSButtonHover17 = new rojeru_san.complementos.RSButtonHover();
        CULLED_SOW = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        CULLED_TOTAL_CULLED = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        CULLED_MAIN_TABLE = new rojeru_san.complementos.RSTableMetro();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        WARNING_SOW = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        WARNING_FORCULLED_LABEL = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        WARNING_SOW_DETAILS = new rojeru_san.complementos.RSTableMetro();
        jScrollPane13 = new javax.swing.JScrollPane();
        WARNING_SOW_LIST_WARNING_SOW = new rojeru_san.complementos.RSTableMetro();
        jPanel13 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        LIST_OF_SOW = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BREEDING_TABLE = new rojeru_san.complementos.RSTableMetro();
        jPanel18 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        rSButtonHover20 = new rojeru_san.complementos.RSButtonHover();
        HAYS = new javax.swing.JLabel();
        NUMBER_OF_EARTAG = new javax.swing.JLabel();
        LIST_OF_SOW_DROPDOWN = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(26, 46, 53));
        jPanel1.setMinimumSize(new java.awt.Dimension(250, 330));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rSButtonHover1.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover1.setText("LIST OF SOW");
        rSButtonHover1.setColorHover(new java.awt.Color(255, 217, 90));
        rSButtonHover1.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover1.setColorTextHover(new java.awt.Color(26, 46, 53));
        rSButtonHover1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover1ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonHover1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 170, -1));

        rSButtonHover2.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover2.setText("VIEW RECORDS");
        rSButtonHover2.setColorHover(new java.awt.Color(255, 217, 90));
        rSButtonHover2.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover2.setColorTextHover(new java.awt.Color(26, 46, 53));
        rSButtonHover2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover2ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonHover2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 170, -1));

        rSButtonHover3.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover3.setText("WARNING SOW");
        rSButtonHover3.setColorHover(new java.awt.Color(255, 217, 90));
        rSButtonHover3.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover3.setColorTextHover(new java.awt.Color(26, 46, 53));
        rSButtonHover3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover3ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonHover3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 170, -1));

        rSButtonHover4.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover4.setText("CULLED SOW");
        rSButtonHover4.setColorHover(new java.awt.Color(255, 217, 90));
        rSButtonHover4.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover4.setColorTextHover(new java.awt.Color(26, 46, 53));
        rSButtonHover4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover4ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonHover4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 170, -1));

        jLabel41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/notification.png"))); // NOI18N
        jLabel41.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel41MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 640, -1, 40));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/logout.png"))); // NOI18N
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 640, 50, 40));

        rSButtonHover5.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover5.setText("HOME");
        rSButtonHover5.setColorHover(new java.awt.Color(255, 217, 90));
        rSButtonHover5.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover5.setColorTextHover(new java.awt.Color(26, 46, 53));
        rSButtonHover5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover5ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonHover5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 170, -1));

        jSplitPane2.setLeftComponent(jPanel1);

        PAGES.setLayout(new java.awt.CardLayout());

        MAIN_PANEL.setBackground(new java.awt.Color(255, 217, 90));
        MAIN_PANEL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout CHART_PANEL_REG_SOWLayout = new javax.swing.GroupLayout(CHART_PANEL_REG_SOW);
        CHART_PANEL_REG_SOW.setLayout(CHART_PANEL_REG_SOWLayout);
        CHART_PANEL_REG_SOWLayout.setHorizontalGroup(
            CHART_PANEL_REG_SOWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        CHART_PANEL_REG_SOWLayout.setVerticalGroup(
            CHART_PANEL_REG_SOWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        MAIN_PANEL.add(CHART_PANEL_REG_SOW, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 650, 300));

        javax.swing.GroupLayout PANEL_PIE_CHARTLayout = new javax.swing.GroupLayout(PANEL_PIE_CHART);
        PANEL_PIE_CHART.setLayout(PANEL_PIE_CHARTLayout);
        PANEL_PIE_CHARTLayout.setHorizontalGroup(
            PANEL_PIE_CHARTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        PANEL_PIE_CHARTLayout.setVerticalGroup(
            PANEL_PIE_CHARTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        MAIN_PANEL.add(PANEL_PIE_CHART, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 190, 410, 300));

        javax.swing.GroupLayout OPEMANAGER_BAR_GRAPHLayout = new javax.swing.GroupLayout(OPEMANAGER_BAR_GRAPH);
        OPEMANAGER_BAR_GRAPH.setLayout(OPEMANAGER_BAR_GRAPHLayout);
        OPEMANAGER_BAR_GRAPHLayout.setHorizontalGroup(
            OPEMANAGER_BAR_GRAPHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        OPEMANAGER_BAR_GRAPHLayout.setVerticalGroup(
            OPEMANAGER_BAR_GRAPHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );

        MAIN_PANEL.add(OPEMANAGER_BAR_GRAPH, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 650, 320));

        PAGES.add(MAIN_PANEL, "MAIN_PANEL");

        VIEW_RECORDS.setBackground(new java.awt.Color(255, 217, 90));
        VIEW_RECORDS.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel38.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel38.setText("FARROWING");
        VIEW_RECORDS.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 160, 40));

        jLabel39.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("BREEDING");
        VIEW_RECORDS.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 510, 40));

        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("WEANING");
        VIEW_RECORDS.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 310, 540, 40));

        PERFORMANCE_FARROWING_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Actual", "Due", "Female", "Male", "Total", "ABW", "Mortality", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PERFORMANCE_FARROWING_TABLE.setColorBackgoundHead(new java.awt.Color(26, 46, 53));
        PERFORMANCE_FARROWING_TABLE.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        PERFORMANCE_FARROWING_TABLE.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        PERFORMANCE_FARROWING_TABLE.setColorForegroundHead(new java.awt.Color(255, 217, 90));
        PERFORMANCE_FARROWING_TABLE.setFuenteFilas(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PERFORMANCE_FARROWING_TABLE.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PERFORMANCE_FARROWING_TABLE.setFuenteHead(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jScrollPane6.setViewportView(PERFORMANCE_FARROWING_TABLE);

        VIEW_RECORDS.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 1040, 200));

        PERFORMANCE_WEANING_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Eartag", "Actual", "Male", "Female", "Total", "AW"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PERFORMANCE_WEANING_TABLE.setColorBackgoundHead(new java.awt.Color(26, 46, 53));
        PERFORMANCE_WEANING_TABLE.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        PERFORMANCE_WEANING_TABLE.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        PERFORMANCE_WEANING_TABLE.setColorForegroundHead(new java.awt.Color(255, 217, 90));
        PERFORMANCE_WEANING_TABLE.setFuenteFilas(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PERFORMANCE_WEANING_TABLE.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PERFORMANCE_WEANING_TABLE.setFuenteHead(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jScrollPane7.setViewportView(PERFORMANCE_WEANING_TABLE);

        VIEW_RECORDS.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 350, 520, 300));

        PERFORMANCE_BREEDING_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Boar Used", "Breeding Date", "Expected", "Comment", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PERFORMANCE_BREEDING_TABLE.setColorBackgoundHead(new java.awt.Color(26, 46, 53));
        PERFORMANCE_BREEDING_TABLE.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        PERFORMANCE_BREEDING_TABLE.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        PERFORMANCE_BREEDING_TABLE.setColorForegroundHead(new java.awt.Color(255, 217, 90));
        PERFORMANCE_BREEDING_TABLE.setFuenteFilas(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PERFORMANCE_BREEDING_TABLE.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        PERFORMANCE_BREEDING_TABLE.setFuenteHead(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jScrollPane14.setViewportView(PERFORMANCE_BREEDING_TABLE);

        VIEW_RECORDS.add(jScrollPane14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 510, 300));
        VIEW_RECORDS.add(PERFORMANCE_SEARCHFIELD, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, 260, 40));

        jLabel42.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel42.setText("SEARCH USING EARTAG");
        VIEW_RECORDS.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 150, -1));

        rSButtonHover16.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover16.setText("SEARCH");
        rSButtonHover16.setColorHover(new java.awt.Color(26, 46, 53));
        rSButtonHover16.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover16.setColorTextHover(new java.awt.Color(255, 217, 90));
        rSButtonHover16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover16ActionPerformed(evt);
            }
        });
        VIEW_RECORDS.add(rSButtonHover16, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 60, 130, -1));

        jPanel4.setBackground(new java.awt.Color(26, 46, 53));
        jPanel4.setForeground(new java.awt.Color(26, 46, 53));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 217, 90));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("VIEW RECORDS");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 280, 50));

        VIEW_RECORDS.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 360, 50));

        rSButtonHover17.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover17.setText("DOWNLOAD");
        rSButtonHover17.setColorHover(new java.awt.Color(26, 46, 53));
        rSButtonHover17.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover17.setColorTextHover(new java.awt.Color(255, 217, 90));
        rSButtonHover17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover17ActionPerformed(evt);
            }
        });
        VIEW_RECORDS.add(rSButtonHover17, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 660, 130, -1));

        PAGES.add(VIEW_RECORDS, "PAGE_5");

        CULLED_SOW.setBackground(new java.awt.Color(255, 217, 90));
        CULLED_SOW.setForeground(new java.awt.Color(51, 0, 51));
        CULLED_SOW.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(26, 46, 53));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("LIST OF CULLED SOW");
        CULLED_SOW.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 50, 300, 40));

        CULLED_TOTAL_CULLED.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        CULLED_TOTAL_CULLED.setForeground(new java.awt.Color(26, 46, 53));
        CULLED_TOTAL_CULLED.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CULLED_TOTAL_CULLED.setText("10000");
        CULLED_SOW.add(CULLED_TOTAL_CULLED, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 200, 70));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(26, 46, 53));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("TOTAL CULLED SOW");
        CULLED_SOW.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, 200, 40));

        CULLED_MAIN_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Culled"
            }
        ));
        CULLED_MAIN_TABLE.setColorBackgoundHead(new java.awt.Color(26, 46, 53));
        CULLED_MAIN_TABLE.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        CULLED_MAIN_TABLE.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        CULLED_MAIN_TABLE.setColorForegroundHead(new java.awt.Color(255, 217, 90));
        jScrollPane11.setViewportView(CULLED_MAIN_TABLE);

        CULLED_SOW.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 100, 180, 580));

        jPanel3.setBackground(new java.awt.Color(26, 46, 53));
        jPanel3.setForeground(new java.awt.Color(26, 46, 53));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 217, 90));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CULLED PAGE");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 280, 50));

        CULLED_SOW.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 360, 50));

        PAGES.add(CULLED_SOW, "PAGE_7");

        WARNING_SOW.setBackground(new java.awt.Color(255, 217, 90));
        WARNING_SOW.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(26, 46, 53));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("WARNING SOW");
        WARNING_SOW.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 120, 40));
        WARNING_SOW.add(WARNING_FORCULLED_LABEL, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 60, 80, 20));

        WARNING_SOW_DETAILS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Female", "Male", "Total", "Mortality", "Remarks", "Due", "Actual"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WARNING_SOW_DETAILS.setColorBackgoundHead(new java.awt.Color(26, 46, 53));
        WARNING_SOW_DETAILS.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        WARNING_SOW_DETAILS.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        WARNING_SOW_DETAILS.setColorForegroundHead(new java.awt.Color(255, 217, 90));
        WARNING_SOW_DETAILS.setFuenteFilas(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        WARNING_SOW_DETAILS.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        WARNING_SOW_DETAILS.setFuenteHead(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jScrollPane12.setViewportView(WARNING_SOW_DETAILS);

        WARNING_SOW.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, 710, 620));

        WARNING_SOW_LIST_WARNING_SOW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Eartag", "Feedback"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WARNING_SOW_LIST_WARNING_SOW.setColorBackgoundHead(new java.awt.Color(26, 46, 53));
        WARNING_SOW_LIST_WARNING_SOW.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        WARNING_SOW_LIST_WARNING_SOW.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        WARNING_SOW_LIST_WARNING_SOW.setColorForegroundHead(new java.awt.Color(255, 217, 90));
        WARNING_SOW_LIST_WARNING_SOW.setFuenteFilas(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        WARNING_SOW_LIST_WARNING_SOW.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        WARNING_SOW_LIST_WARNING_SOW.setFuenteHead(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jScrollPane13.setViewportView(WARNING_SOW_LIST_WARNING_SOW);

        WARNING_SOW.add(jScrollPane13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 320, 620));

        jPanel13.setBackground(new java.awt.Color(26, 46, 53));
        jPanel13.setForeground(new java.awt.Color(26, 46, 53));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel43.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 217, 90));
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setText("WARNING PAGE");
        jPanel13.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 280, 50));

        WARNING_SOW.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 20, 360, 50));

        PAGES.add(WARNING_SOW, "PAGE_6");

        LIST_OF_SOW.setBackground(new java.awt.Color(255, 217, 90));
        LIST_OF_SOW.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BREEDING_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Eartag", "Boar Used", "Breeding Date", "Expected", "Comments", "Status", "Culled"
            }
        ));
        BREEDING_TABLE.setColorBackgoundHead(new java.awt.Color(26, 46, 53));
        BREEDING_TABLE.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        BREEDING_TABLE.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        BREEDING_TABLE.setColorForegroundHead(new java.awt.Color(255, 217, 90));
        BREEDING_TABLE.setFuenteFilas(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        BREEDING_TABLE.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        BREEDING_TABLE.setFuenteHead(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jScrollPane1.setViewportView(BREEDING_TABLE);

        LIST_OF_SOW.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 1070, 580));

        jPanel18.setBackground(new java.awt.Color(26, 46, 53));
        jPanel18.setForeground(new java.awt.Color(26, 46, 53));
        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel48.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 217, 90));
        jLabel48.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel48.setText("LIST OF SOW");
        jPanel18.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 280, 50));

        LIST_OF_SOW.add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 10, 360, 50));

        rSButtonHover20.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover20.setText("REFERESH");
        rSButtonHover20.setColorHover(new java.awt.Color(26, 46, 53));
        rSButtonHover20.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover20.setColorTextHover(new java.awt.Color(255, 217, 90));
        rSButtonHover20.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        rSButtonHover20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover20ActionPerformed(evt);
            }
        });
        LIST_OF_SOW.add(rSButtonHover20, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 80, 90, 30));

        HAYS.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        HAYS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HAYS.setText("NUMBER OF SOW :");
        LIST_OF_SOW.add(HAYS, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 240, 50));

        NUMBER_OF_EARTAG.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        NUMBER_OF_EARTAG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NUMBER_OF_EARTAG.setText("1000");
        LIST_OF_SOW.add(NUMBER_OF_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, 90, 50));

        LIST_OF_SOW_DROPDOWN.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Breeding", "Farrowing", "Weaning", "Culled" }));
        LIST_OF_SOW.add(LIST_OF_SOW_DROPDOWN, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 80, 110, 30));

        PAGES.add(LIST_OF_SOW, "PAGE_2");

        jSplitPane2.setRightComponent(PAGES);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1365, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonHover1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover1ActionPerformed
        cardLayout.show(PAGES, "PAGE_2");
    }//GEN-LAST:event_rSButtonHover1ActionPerformed

    private void rSButtonHover2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover2ActionPerformed
        cardLayout.show(PAGES, "PAGE_5");
    }//GEN-LAST:event_rSButtonHover2ActionPerformed

    private void rSButtonHover3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover3ActionPerformed
        cardLayout.show(PAGES, "PAGE_6");
    }//GEN-LAST:event_rSButtonHover3ActionPerformed

    private void rSButtonHover4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover4ActionPerformed
        cardLayout.show(PAGES, "PAGE_7");
    }//GEN-LAST:event_rSButtonHover4ActionPerformed

    private void jLabel41MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel41MouseClicked
        notificationModal.setVisible(!notificationModal.isVisible());
    }//GEN-LAST:event_jLabel41MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        LOGIN n = new LOGIN();

        n.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel9MouseClicked

    private void rSButtonHover16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover16ActionPerformed
        PERFORMANCE_BREEDING_RETRIEVE_BREEDING_DETAILS();
        PERFORMCE_FARROWING_RETRIEVE_DETAILS();
        PERFORMANCE_WEANING_RETRIEVE_DETAILS();
    }//GEN-LAST:event_rSButtonHover16ActionPerformed

    private void rSButtonHover20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover20ActionPerformed
        BREEDING_RETRIEVE_BREEDING_DETAILS();
    }//GEN-LAST:event_rSButtonHover20ActionPerformed

    private void rSButtonHover5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover5ActionPerformed
        cardLayout.show(PAGES, "MAIN_PANEL");
    }//GEN-LAST:event_rSButtonHover5ActionPerformed

    private void rSButtonHover17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover17ActionPerformed

        List<JTable> tables = new ArrayList<>();
        tables.add(PERFORMANCE_FARROWING_TABLE);
        tables.add(PERFORMANCE_BREEDING_TABLE);
        tables.add(PERFORMANCE_WEANING_TABLE);

        String eartag = PERFORMANCE_SEARCHFIELD.getText();

        DOWNLOAD downloader = new DOWNLOAD(tables, eartag);
        downloader.printTablesToPdf(tables, eartag);

    }//GEN-LAST:event_rSButtonHover17ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SECRETARY().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojeru_san.complementos.RSTableMetro BREEDING_TABLE;
    private javax.swing.JPanel CHART_PANEL_REG_SOW;
    private rojeru_san.complementos.RSTableMetro CULLED_MAIN_TABLE;
    private javax.swing.JPanel CULLED_SOW;
    private javax.swing.JLabel CULLED_TOTAL_CULLED;
    private javax.swing.JLabel HAYS;
    private javax.swing.JPanel LIST_OF_SOW;
    private javax.swing.JComboBox<String> LIST_OF_SOW_DROPDOWN;
    private javax.swing.JPanel MAIN_PANEL;
    private javax.swing.JLabel NUMBER_OF_EARTAG;
    private javax.swing.JPanel OPEMANAGER_BAR_GRAPH;
    private javax.swing.JPanel PAGES;
    private javax.swing.JPanel PANEL_PIE_CHART;
    private rojeru_san.complementos.RSTableMetro PERFORMANCE_BREEDING_TABLE;
    private rojeru_san.complementos.RSTableMetro PERFORMANCE_FARROWING_TABLE;
    private javax.swing.JTextField PERFORMANCE_SEARCHFIELD;
    private rojeru_san.complementos.RSTableMetro PERFORMANCE_WEANING_TABLE;
    private javax.swing.JPanel VIEW_RECORDS;
    private javax.swing.JLabel WARNING_FORCULLED_LABEL;
    private javax.swing.JPanel WARNING_SOW;
    private rojeru_san.complementos.RSTableMetro WARNING_SOW_DETAILS;
    private rojeru_san.complementos.RSTableMetro WARNING_SOW_LIST_WARNING_SOW;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSplitPane jSplitPane2;
    private rojeru_san.complementos.RSButtonHover rSButtonHover1;
    private rojeru_san.complementos.RSButtonHover rSButtonHover16;
    private rojeru_san.complementos.RSButtonHover rSButtonHover17;
    private rojeru_san.complementos.RSButtonHover rSButtonHover2;
    private rojeru_san.complementos.RSButtonHover rSButtonHover20;
    private rojeru_san.complementos.RSButtonHover rSButtonHover3;
    private rojeru_san.complementos.RSButtonHover rSButtonHover4;
    private rojeru_san.complementos.RSButtonHover rSButtonHover5;
    // End of variables declaration//GEN-END:variables

    private void PERFORMANCE_BREEDING_RETRIEVE_BREEDING_DETAILS() {

        try {
            DefaultTableModel model = new DefaultTableModel();

            String query = "SELECT boar_used, breeding_date, expected_farrowing, rebreed FROM breeding WHERE eartag = ?";
            pst = conn.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(PERFORMANCE_SEARCHFIELD.getText()));
            rs = pst.executeQuery();

            model.addColumn("Boar");
            model.addColumn("Date");
            model.addColumn("Expected");
            model.addColumn("Rebreed");

            while (rs.next()) {
                Date breeding_date = rs.getDate("breeding_date");
                String boar_used = rs.getString("boar_used");
                Date expected_farrowing = rs.getDate("expected_farrowing");
                int isFarrowed = rs.getInt("rebreed");
                String status = isFarrowed == 1 ? "rebreed" : "not";

                model.addRow(new Object[]{boar_used, breeding_date, expected_farrowing, status});
            }

            if (PERFORMANCE_BREEDING_TABLE != null) {
                PERFORMANCE_BREEDING_TABLE.setModel(model);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void PERFORMCE_FARROWING_RETRIEVE_DETAILS() {

        try {
            DefaultTableModel model = new DefaultTableModel();

            String query = "SELECT farrowing_actualdate, farrowing_duedate, female_piglets, male_piglets, total_piglets, abw, mortality, remarks FROM farrowing_records WHERE eartag = ?";
            pst = conn.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(PERFORMANCE_SEARCHFIELD.getText()));
            rs = pst.executeQuery();

            model.addColumn("Actual");
            model.addColumn("Due");
            model.addColumn("Female");
            model.addColumn("Male");
            model.addColumn("Total");
            model.addColumn("ABW");
            model.addColumn("Mortality");
            model.addColumn("Remarks");

            while (rs.next()) {
                Date farrowing_actualdate = rs.getDate("farrowing_actualdate");
                Date farrowing_duedate = rs.getDate("farrowing_duedate");
                int female_piglets = rs.getInt("female_piglets");
                int male_piglets = rs.getInt("male_piglets");
                int total_piglets = rs.getInt("total_piglets");
                double abw = rs.getDouble("abw");
                int mortality = rs.getInt("mortality");
                String remarks = rs.getString("remarks");

                model.addRow(new Object[]{farrowing_actualdate, farrowing_duedate, female_piglets, male_piglets, total_piglets, abw, mortality, remarks});
            }

            if (PERFORMANCE_FARROWING_TABLE != null) {
                PERFORMANCE_FARROWING_TABLE.setModel(model);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void PERFORMANCE_WEANING_RETRIEVE_DETAILS() {

        try {
            DefaultTableModel model = new DefaultTableModel();
            String query = "SELECT eartag, weaning_actualdate, male_piglets, female_piglets, total_piglets, aw FROM weaning_records WHERE eartag = ?";
            pst = conn.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(PERFORMANCE_SEARCHFIELD.getText()));
            rs = pst.executeQuery();

            model.addColumn("Eartag");
            model.addColumn("Actual");
            model.addColumn("Male");
            model.addColumn("Female");
            model.addColumn("Total");
            model.addColumn("AW");

            while (rs.next()) {
                int eartag = rs.getInt("eartag");
                Date weaning_actualdate = rs.getDate("weaning_actualdate");
                int male_piglets = rs.getInt("male_piglets");
                int female_piglets = rs.getInt("female_piglets");
                int total_piglets = rs.getInt("total_piglets");
                double aw = rs.getDouble("aw");

                model.addRow(new Object[]{eartag, weaning_actualdate, male_piglets, female_piglets, total_piglets, aw});
            }

            PERFORMANCE_WEANING_TABLE.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void WARNING_FETCH_EARTAG() {
        try {
            DefaultTableModel model = new DefaultTableModel();
            String warningSowsQuery = "SELECT DISTINCT fr.eartag, "
                    + "CASE "
                    + "    WHEN fr.total_piglets < 7 THEN 'Total piglets less than 7' "
                    + "    WHEN fr.mortality > 0 THEN 'Mortality greater than 0' "
                    + "    WHEN fr.remarks IS NOT NULL AND fr.remarks <> '' THEN 'Remarks not empty' "
                    + "    WHEN (fr.farrowing_actualdate < fr.farrowing_duedate - INTERVAL 3 DAY "
                    + "          OR fr.farrowing_actualdate > fr.farrowing_duedate + INTERVAL 3 DAY) THEN 'Actual date outside the 3-day marking' "
                    + "END AS criteria "
                    + "FROM farrowing_records fr "
                    + "WHERE (fr.total_piglets < 7 "
                    + "    OR fr.mortality > 0 "
                    + "    OR (fr.remarks IS NOT NULL AND fr.remarks <> '') "
                    + "    OR (fr.farrowing_actualdate < fr.farrowing_duedate - INTERVAL 3 DAY "
                    + "        OR fr.farrowing_actualdate > fr.farrowing_duedate + INTERVAL 3 DAY)) "
                    + "    AND fr.culled = 0 "
                    + "    AND NOT EXISTS ("
                    + "        SELECT 1 "
                    + "        FROM breeding b "
                    + "        WHERE fr.eartag = b.eartag AND b.sow_status = 0"
                    + "    )";

            pst = conn.prepareStatement(warningSowsQuery);
            rs = pst.executeQuery();

            model.addColumn("Eartag");
            model.addColumn("Description");

            while (rs.next()) {
                int eartag = rs.getInt("eartag");
                String criteria = rs.getString("criteria");

                model.addRow(new Object[]{eartag, criteria});
            }

            if (WARNING_SOW_LIST_WARNING_SOW != null) {
                WARNING_SOW_LIST_WARNING_SOW.setModel(model);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void CULLED_FETCH_EARTAG() {

        try {
            DefaultTableModel model = new DefaultTableModel();

            String cullQuery = "SELECT DISTINCT eartag FROM farrowing_records WHERE culled = true";

            pst = conn.prepareStatement(cullQuery);
            rs = pst.executeQuery();

            int counterForCull = 0;

            model.addColumn("Eartag");

            while (rs.next()) {
                counterForCull++;
                int eartag = rs.getInt("eartag");

                model.addRow(new Object[]{eartag});
            }

            CULLED_TOTAL_CULLED.setText(String.valueOf(counterForCull));

            if (CULLED_MAIN_TABLE != null) {
                CULLED_MAIN_TABLE.setModel(model);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void DISPLAYCHART() {
        CategoryChart chartForRegSow = new CategoryChartBuilder().width(800).height(600).theme(Styler.ChartTheme.Matlab).build();

        chartForRegSow.setTitle("ALIVE SOW BY BATCH");
        chartForRegSow.setXAxisTitle("Batch");
        chartForRegSow.setYAxisTitle("Alive Sow Count");

        try {
            String query = "SELECT rs.bnumber, COUNT(*) AS count "
                    + "FROM register_sow rs "
                    + "JOIN breeding b ON rs.eartag = b.eartag "
                    + "WHERE b.sow_status != 3 "
                    + "GROUP BY rs.bnumber";
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();

            List<String> xValues = new ArrayList<>();
            List<Integer> yValues = new ArrayList<>();

            while (rs.next()) {
                String batch = rs.getString("bnumber");
                int count = rs.getInt("count");

                xValues.add(batch);
                yValues.add(count);
            }

            chartForRegSow.addSeries("Alive Sow Count", xValues, yValues).setFillColor(new Color(0, 100, 0));

        } catch (SQLException e) {
            e.printStackTrace();
        }

        chartPanel = new XChartPanel<>(chartForRegSow);
        CHART_PANEL_REG_SOW.setLayout(new BorderLayout());
        CHART_PANEL_REG_SOW.add(chartPanel, BorderLayout.CENTER);

        pack();
        setVisible(true);
    }

    private void BAR_GRAPH() {
        CategoryChart chartForCulledSow = new CategoryChartBuilder().width(800).height(600).theme(Styler.ChartTheme.Matlab).build();

        chartForCulledSow.setTitle("CULLED SOW BY BATCH");
        chartForCulledSow.setXAxisTitle("Batch");
        chartForCulledSow.setYAxisTitle("Culled Sow Count");

        try {
            String query = "SELECT rs.bnumber, COUNT(*) AS count "
                    + "FROM register_sow rs "
                    + "JOIN breeding b ON rs.eartag = b.eartag "
                    + "WHERE b.sow_status = 3 "
                    + "GROUP BY rs.bnumber "
                    + "ORDER BY rs.bnumber";
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();

            List<String> xValues = new ArrayList<>();
            List<Integer> yValues = new ArrayList<>();

            while (rs.next()) {
                String batch = rs.getString("bnumber");
                int count = rs.getInt("count");

                xValues.add(batch);
                yValues.add(count);
            }

            chartForCulledSow.addSeries("Culled Sow Count", xValues, yValues).setFillColor(new Color(0, 255, 255)); // Set cyan color

        } catch (SQLException e) {
            e.printStackTrace();
        }

        barGraphForCulled = new XChartPanel<>(chartForCulledSow);
        OPEMANAGER_BAR_GRAPH.setLayout(new BorderLayout());
        OPEMANAGER_BAR_GRAPH.add(barGraphForCulled, BorderLayout.CENTER);

        pack();
        setVisible(true);
    }

    private void PIE_CHART() {
        PieChart chartForPie = new PieChartBuilder().width(800).height(600).theme(Styler.ChartTheme.Matlab).build();
        Styler styler = chartForPie.getStyler();
        styler.setChartBackgroundColor(new Color(255, 217, 90));

        chartForPie.setTitle("PIE CHART");

        try {
            String culledQuery = "SELECT COUNT(*) AS culledCount FROM farrowing_records WHERE culled = 1";
            pst = conn.prepareStatement(culledQuery);
            rs = pst.executeQuery();
            if (rs.next()) {
                int culledCount = rs.getInt("culledCount");
                chartForPie.addSeries("Culled (" + culledCount + ")", culledCount);
            }

            String farrowedQuery = "SELECT COUNT(*) AS farrowedCount FROM breeding WHERE sow_status = 1";

            pst = conn.prepareStatement(farrowedQuery);
            rs = pst.executeQuery();

            if (rs.next()) {
                int farrowedCount = rs.getInt("farrowedCount");
                chartForPie.addSeries("Farrowed (" + farrowedCount + ")", farrowedCount);
            }

            String warningQuery = "SELECT COUNT(*) AS warningCount "
                    + "FROM ("
                    + "    SELECT fr.eartag "
                    + "    FROM farrowing_records fr "
                    + "    WHERE (fr.total_piglets < 7 "
                    + "    OR fr.mortality > 0 "
                    + "    OR (fr.remarks IS NOT NULL AND fr.remarks <> '') "
                    + "    OR (fr.farrowing_actualdate < fr.farrowing_duedate - INTERVAL 3 DAY "
                    + "        OR fr.farrowing_actualdate > fr.farrowing_duedate + INTERVAL 3 DAY)) "
                    + "    AND fr.culled = 0 "
                    + "    AND NOT EXISTS ("
                    + "        SELECT 1 "
                    + "        FROM breeding b "
                    + "        WHERE fr.eartag = b.eartag AND b.sow_status = 0"
                    + "    )"
                    + ") AS warningResults";

            pst = conn.prepareStatement(warningQuery);
            rs = pst.executeQuery();
            if (rs.next()) {
                int warningCount = rs.getInt("warningCount");
                chartForPie.addSeries("Warning (" + warningCount + ")", warningCount);

                System.out.println("Warning Query Result:");
                System.out.println(warningCount);
            }

            String weaningQuery = "SELECT COUNT(*) AS weaningCount FROM breeding b1 WHERE sow_status = 2 AND breeding_id = (SELECT MAX(breeding_id) FROM breeding b2 WHERE b1.eartag = b2.eartag)";

            pst = conn.prepareStatement(weaningQuery);
            rs = pst.executeQuery();

            if (rs.next()) {
                int weaningCount = rs.getInt("weaningCount");
                chartForPie.addSeries("Weaning (" + weaningCount + ")", weaningCount);
            }

            String breedingQuery = "SELECT COUNT(*) AS breedingCount FROM breeding b1 WHERE sow_status = 0 AND breeding_id = (SELECT MAX(breeding_id) FROM breeding b2 WHERE b1.eartag = b2.eartag)";

            pst = conn.prepareStatement(breedingQuery);
            rs = pst.executeQuery();

            if (rs.next()) {
                int breedingCount = rs.getInt("breedingCount");
                chartForPie.addSeries("Breeding (" + breedingCount + ")", breedingCount);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        pieChartPanel = new XChartPanel<>(chartForPie);

        PANEL_PIE_CHART.setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;

        PANEL_PIE_CHART.add(pieChartPanel, gbc);

        pack();
        PANEL_PIE_CHART.setVisible(true);
    }

    private void BREEDING_RETRIEVE_BREEDING_DETAILS() {

        int numberOfEartag = 0;
        try {
            DefaultTableModel model = new DefaultTableModel();

            String query = "SELECT b.eartag, b.boar_used, b.breeding_date, b.expected_farrowing, b.breeding_type, b.lactate, b.rebreed, b.sow_status, b.parity AS highest_parity, rs.penbuilding, rs.penroom, rs.assigned_employee "
                    + "FROM breeding b "
                    + "LEFT JOIN register_sow rs ON b.eartag = rs.eartag "
                    + "WHERE (b.eartag, b.parity) IN ( "
                    + "    SELECT eartag, MAX(parity) "
                    + "    FROM breeding "
                    + "    GROUP BY eartag "
                    + ")";

            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();

            model.addColumn("Eartag");
            model.addColumn("Boar");
            model.addColumn("Date");
            model.addColumn("Expected");

            model.addColumn("Type");
            model.addColumn("Lactate");

            model.addColumn("Building");
            model.addColumn("Room");
            model.addColumn("Employee");
            model.addColumn("Parity");

            model.addColumn("Rebreed");
            model.addColumn("Sow Status");

            while (rs.next()) {
                numberOfEartag++;
                NUMBER_OF_EARTAG.setText(String.valueOf(numberOfEartag));

                int breedingEartag = rs.getInt("eartag");
                Date breeding_date = rs.getDate("breeding_date");
                String boar_used = rs.getString("boar_used");
                Date expected_farrowing = rs.getDate("expected_farrowing");
                String breeding_type = rs.getString("breeding_type");
                String lactate = rs.getString("lactate");

                boolean rebreed = rs.getBoolean("rebreed");
                String setStatusForRebreedStatus = rebreed ? "yes" : "no";

                int parity = rs.getInt("highest_parity");
                String penbuilding = rs.getString("penbuilding");
                String penroom = rs.getString("penroom");
                String assignedEmployee = rs.getString("assigned_employee");

                int sowStatus = rs.getInt("sow_status");
                String sowStatusString = "";
                sowStatusString = switch (sowStatus) {
                    case 0 ->
                        "Breeding";
                    case 1 ->
                        "Farrowed";
                    case 2 ->
                        "Weaned";
                    case 3 ->
                        "Culled";
                    default ->
                        "Unknown";
                };

                model.addRow(new Object[]{
                    breedingEartag, boar_used, breeding_date, expected_farrowing, breeding_type,
                    lactate, penbuilding, penroom, assignedEmployee, parity,
                    setStatusForRebreedStatus, sowStatusString
                });
            }

            if (BREEDING_TABLE != null) {
                BREEDING_TABLE.setModel(model);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void BREEDING_RETRIEVE_SOW_BY_CLASSIFICATION() {

        int numberOfEartag = 0;
        try {
            DefaultTableModel model = new DefaultTableModel();
//            String selected = (String) LIST_OF_SOW_DROPDOWN.getSelectedItem();

            String query = "SELECT b.eartag, b.boar_used, b.breeding_date, b.expected_farrowing, b.breeding_type, b.lactate, b.rebreed, b.sow_status, b.parity AS highest_parity, rs.penbuilding, rs.penroom, rs.assigned_employee "
                    + "FROM breeding b "
                    + "LEFT JOIN register_sow rs ON b.eartag = rs.eartag "
                    + "WHERE (b.eartag, b.parity) IN ( "
                    + "    SELECT eartag, MAX(parity) "
                    + "    FROM breeding "
                    + "    GROUP BY eartag "
                    + ") "
                    + "AND b.sow_status = ?";

            pst = conn.prepareStatement(query);

            if (LIST_OF_SOW_DROPDOWN.getSelectedItem() == "Breeding") {
                pst.setInt(1, 0);
            } else if (LIST_OF_SOW_DROPDOWN.getSelectedItem() == "Farrowing") {
                pst.setInt(1, 1);
            } else if (LIST_OF_SOW_DROPDOWN.getSelectedItem() == "Weaning") {
                pst.setInt(1, 2);
            } else if (LIST_OF_SOW_DROPDOWN.getSelectedItem() == "Culled") {
                pst.setInt(1, 3);
            } else {
                BREEDING_RETRIEVE_BREEDING_DETAILS();
            }

            rs = pst.executeQuery();

            model.addColumn("Eartag");
            model.addColumn("Boar");
            model.addColumn("Date");
            model.addColumn("Expected");

            model.addColumn("Type");
            model.addColumn("Lactate");

            model.addColumn("Building");
            model.addColumn("Room");
            model.addColumn("Employee");
            model.addColumn("Parity");

            model.addColumn("Rebreed");
            model.addColumn("Sow Status");

            while (rs.next()) {
                numberOfEartag++;
                NUMBER_OF_EARTAG.setText(String.valueOf(numberOfEartag));

                int breedingEartag = rs.getInt("eartag");
                Date breeding_date = rs.getDate("breeding_date");
                String boar_used = rs.getString("boar_used");
                Date expected_farrowing = rs.getDate("expected_farrowing");
                String breeding_type = rs.getString("breeding_type");
                String lactate = rs.getString("lactate");

                boolean rebreed = rs.getBoolean("rebreed");
                String setStatusForRebreedStatus = rebreed ? "yes" : "no";

                int parity = rs.getInt("highest_parity");
                String penbuilding = rs.getString("penbuilding");
                String penroom = rs.getString("penroom");
                String assignedEmployee = rs.getString("assigned_employee");

                int sowStatus = rs.getInt("sow_status");
                String sowStatusString = "";
                sowStatusString = switch (sowStatus) {
                    case 0 ->
                        "Breeding";
                    case 1 ->
                        "Farrowed";
                    case 2 ->
                        "Weaned";
                    case 3 ->
                        "Culled";
                    default ->
                        "Unknown";
                };

                model.addRow(new Object[]{
                    breedingEartag, boar_used, breeding_date, expected_farrowing, breeding_type,
                    lactate, penbuilding, penroom, assignedEmployee, parity,
                    setStatusForRebreedStatus, sowStatusString
                });
            }

            if (BREEDING_TABLE != null) {
                BREEDING_TABLE.setModel(model);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

}
