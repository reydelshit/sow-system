
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Reydel
 */
public class SECRETARY extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    CardLayout cardLayout;

    public SECRETARY() {
        conn = DBConnection.getConnection();
        initComponents();
        REGISTER_RETRIEVE_REGISTERED_SOW();
        
        FETCH_CURRENT_EARTAG();
        
        boolean setNotif = false;
        FETCH_NOTIFICATION(setNotif);
        
//        FETCH_NOTIFICATION();
        
//        FARROWING_NOTIFICATION();
        
        
//        BREEDING 
        BREEDING_RETRIEVE_BREEDING_DETAILS();
        BREEDING_FETCH_VALUE_FROM_BATCH_NUMBER();
       
//        VISIBILITY
//        BREEDING_EARTAG.setVisible(false);
        

//      FARROWING 
//        FARROWING_SEARCH_EARTAG();
          FARROWING_DETAILS_CONTAINER.setVisible(false);
          
//          WEANING
        WEANING_RETRIEVE_DETAILS();

//    DISABLED BUTTON 
        BREEDING_SELECT_SOW_BUTTON.setEnabled(false);
        FARROWING_SELECT_BUTTON.setEnabled(false);

        
        cardLayout = (CardLayout)(PAGES.getLayout());
    }
    

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        NOTIFICATION_BUTTON = new javax.swing.JButton();
        NUMBER_OF_NOTIFICATION = new javax.swing.JLabel();
        PAGES = new javax.swing.JPanel();
        MAIN_PANEL = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CULLED_SOW = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        REGISTER_OF_SOW = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        REGSOW_DATE = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        REGSOW_BUILDING = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        REGSOW_ROOM = new javax.swing.JComboBox<>();
        REGSOW_BNUMBER = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        REGSOW_BUTTON = new javax.swing.JButton();
        EARTAG_TITLE = new javax.swing.JLabel();
        ADD_EARTAG = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        EARTAG_CONTAINER = new javax.swing.JPanel();
        LATEST_REGSOW_EARTAG = new javax.swing.JLabel();
        CURRENT_REGSOW_EARTAG = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        REGSOW_TABLE = new javax.swing.JTable();
        BREEDING = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LIST_OF_SOW_BY_BATCH = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        BREEDING_TABLE = new javax.swing.JTable();
        DROPDOWN_FOR_BATCH_NUMBER = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        BREEDING_BOAR_USED = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        BREEDING_COMMENTS = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        START_BREEDING_BUTTON = new javax.swing.JButton();
        BREEDING_DATE = new com.toedter.calendar.JDateChooser();
        BREEDING_SELECT_SOW_BUTTON = new javax.swing.JButton();
        EXPECTED_FARROWING_LABEL = new javax.swing.JPanel();
        BREEDING_EXPECTED_FARROWING = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        BREEDING_EARTAG = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        FARROWING = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        FARROWING_ONGOING_BREEDING = new javax.swing.JTable();
        FARROWING_SEARCH_FIELD = new javax.swing.JTextField();
        FARROWING_BUTTON = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        FARROWING_SELECT_BUTTON = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        FARROWING_DUE = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        FARROWING_FEMALE = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        FARROWING_MALE = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        FARROWING_TOTAL_PIGLETS = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        FARROWING_ABW = new javax.swing.JTextField();
        FARROWING_MORT = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        FARROWING_REMARKS = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        FARROWING_SUBMIT_BUTTON = new javax.swing.JButton();
        FARROWING_ACTUAL = new com.toedter.calendar.JDateChooser();
        jButton9 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        FARROWING_EARTAG = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        FARROWING_DETAILS_CONTAINER = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        FARROWING_MAIN_TABLE = new javax.swing.JTable();
        WEANING = new javax.swing.JPanel();
        WEANING_CALENDAR = new com.toedter.calendar.JDateChooser();
        WEANING_MALE = new javax.swing.JTextField();
        WEANING_FEMALE = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        WEANING_AW = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        WEANING_SEARCH_FIELD = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        WEANING_MAIN_TABLE = new javax.swing.JTable();
        jLabel34 = new javax.swing.JLabel();
        WEANING_TOTAL = new javax.swing.JTextField();
        WEANING_EARTAG = new javax.swing.JLabel();
        PERFORMANCE = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setMinimumSize(new java.awt.Dimension(250, 330));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("PERFORMANCE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 150, 40));

        jButton2.setText("REGISTER SOW");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 150, 40));

        jButton3.setText("BREEDING");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 150, 40));

        jButton4.setText("FARROWING");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, 150, 40));

        jButton5.setText("WEANING");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 150, 40));

        jButton8.setText("HOME");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 150, 40));

        NOTIFICATION_BUTTON.setText("NOTIFICATION");
        NOTIFICATION_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NOTIFICATION_BUTTONActionPerformed(evt);
            }
        });
        jPanel1.add(NOTIFICATION_BUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 600, 110, 50));

        NUMBER_OF_NOTIFICATION.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        NUMBER_OF_NOTIFICATION.setForeground(new java.awt.Color(255, 255, 255));
        NUMBER_OF_NOTIFICATION.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NUMBER_OF_NOTIFICATION.setText("0");
        jPanel1.add(NUMBER_OF_NOTIFICATION, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 610, 30, 30));

        jSplitPane2.setLeftComponent(jPanel1);

        PAGES.setLayout(new java.awt.CardLayout());

        MAIN_PANEL.setBackground(new java.awt.Color(153, 255, 153));
        MAIN_PANEL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("WARNING SOW");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 90, 40));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("999");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 90, -1));

        MAIN_PANEL.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 50, 130, 120));

        CULLED_SOW.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("CULLED SOW");
        CULLED_SOW.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 90, 40));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("1002");
        CULLED_SOW.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 52, 90, 52));

        MAIN_PANEL.add(CULLED_SOW, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 130, 120));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("RDJ FARM");
        MAIN_PANEL.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 350, 60));

        PAGES.add(MAIN_PANEL, "MAIN_PANEL");

        REGISTER_OF_SOW.setBackground(new java.awt.Color(204, 204, 255));
        REGISTER_OF_SOW.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(REGSOW_DATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 150, 30));

        jLabel1.setText("DATE");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, -1, -1));

        jLabel4.setText("BUILDING");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));

        REGSOW_BUILDING.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        jPanel2.add(REGSOW_BUILDING, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 80, 20));

        jLabel3.setText("PEN NUMBER");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, -1, -1));

        jLabel5.setText("ROOM");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, -1, -1));

        REGSOW_ROOM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35" }));
        jPanel2.add(REGSOW_ROOM, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 70, 20));
        jPanel2.add(REGSOW_BNUMBER, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 160, 30));

        jLabel2.setText("BATCH NUMBER");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, -1, -1));

        REGSOW_BUTTON.setText("REGISTER SOW");
        REGSOW_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REGSOW_BUTTONActionPerformed(evt);
            }
        });
        jPanel2.add(REGSOW_BUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, 130, 30));

        EARTAG_TITLE.setText("EARTAG");
        jPanel2.add(EARTAG_TITLE, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 50, 30));

        ADD_EARTAG.setText("ADD EARTAG");
        ADD_EARTAG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADD_EARTAGActionPerformed(evt);
            }
        });
        jPanel2.add(ADD_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 370, -1, -1));

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("SUGGESTED EARTAG");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 150, 20));

        EARTAG_CONTAINER.setBackground(new java.awt.Color(153, 153, 153));
        EARTAG_CONTAINER.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LATEST_REGSOW_EARTAG.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LATEST_REGSOW_EARTAG.setForeground(new java.awt.Color(255, 255, 0));
        LATEST_REGSOW_EARTAG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EARTAG_CONTAINER.add(LATEST_REGSOW_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 60, 40));

        jPanel2.add(EARTAG_CONTAINER, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, 150, 40));

        CURRENT_REGSOW_EARTAG.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        CURRENT_REGSOW_EARTAG.setForeground(new java.awt.Color(255, 255, 0));
        CURRENT_REGSOW_EARTAG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CURRENT_REGSOW_EARTAG.setText("5000");
        jPanel2.add(CURRENT_REGSOW_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 330, 60, 30));

        REGISTER_OF_SOW.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 250, 690));

        REGSOW_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "DATE", "EARTAG", "BATCH NUMBER", "BUILDING", "ROOM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(REGSOW_TABLE);
        if (REGSOW_TABLE.getColumnModel().getColumnCount() > 0) {
            REGSOW_TABLE.getColumnModel().getColumn(0).setResizable(false);
            REGSOW_TABLE.getColumnModel().getColumn(1).setResizable(false);
            REGSOW_TABLE.getColumnModel().getColumn(2).setResizable(false);
            REGSOW_TABLE.getColumnModel().getColumn(3).setResizable(false);
            REGSOW_TABLE.getColumnModel().getColumn(5).setResizable(false);
        }

        REGISTER_OF_SOW.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 800, 690));

        PAGES.add(REGISTER_OF_SOW, "PAGE_1");

        BREEDING.setBackground(new java.awt.Color(0, 255, 255));
        BREEDING.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LIST_OF_SOW_BY_BATCH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(LIST_OF_SOW_BY_BATCH);

        BREEDING.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 260, 150));

        BREEDING_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(BREEDING_TABLE);

        BREEDING.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, 780, 600));

        DROPDOWN_FOR_BATCH_NUMBER.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT BATCH" }));
        BREEDING.add(DROPDOWN_FOR_BATCH_NUMBER, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 150, 30));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("COMMENTS");
        BREEDING.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 550, 130, 20));

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("LIST OF SOW");
        BREEDING.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 130, 20));
        BREEDING.add(BREEDING_BOAR_USED, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 350, 250, 40));

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("EAR TAG");
        BREEDING.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 130, 20));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("BREEDING DATE");
        BREEDING.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, 130, 20));

        BREEDING_COMMENTS.setColumns(20);
        BREEDING_COMMENTS.setRows(5);
        jScrollPane4.setViewportView(BREEDING_COMMENTS);

        BREEDING.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 570, 250, -1));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("EXPECTED FARROWING");
        BREEDING.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 480, 200, 20));

        START_BREEDING_BUTTON.setText("START BREEDING");
        START_BREEDING_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                START_BREEDING_BUTTONActionPerformed(evt);
            }
        });
        BREEDING.add(START_BREEDING_BUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 670, 170, 30));

        BREEDING_DATE.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                BREEDING_DATEPropertyChange(evt);
            }
        });
        BREEDING.add(BREEDING_DATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, 250, 40));

        BREEDING_SELECT_SOW_BUTTON.setText("SELECT");
        BREEDING_SELECT_SOW_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BREEDING_SELECT_SOW_BUTTONActionPerformed(evt);
            }
        });
        BREEDING.add(BREEDING_SELECT_SOW_BUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, -1, -1));

        EXPECTED_FARROWING_LABEL.setBackground(new java.awt.Color(153, 153, 153));
        EXPECTED_FARROWING_LABEL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BREEDING_EXPECTED_FARROWING.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BREEDING_EXPECTED_FARROWING.setForeground(new java.awt.Color(255, 255, 255));
        BREEDING_EXPECTED_FARROWING.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EXPECTED_FARROWING_LABEL.add(BREEDING_EXPECTED_FARROWING, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 40));

        BREEDING.add(EXPECTED_FARROWING_LABEL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, 250, 40));

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BREEDING_EARTAG.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BREEDING_EARTAG.setForeground(new java.awt.Color(255, 255, 255));
        BREEDING_EARTAG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel4.add(BREEDING_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 40));

        BREEDING.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 250, 40));

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("BOAR USED");
        BREEDING.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 130, 20));

        PAGES.add(BREEDING, "PAGE_2");

        FARROWING.setBackground(new java.awt.Color(0, 153, 255));
        FARROWING.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FARROWING_ONGOING_BREEDING.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(FARROWING_ONGOING_BREEDING);

        FARROWING.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 120, 390, 120));
        FARROWING.add(FARROWING_SEARCH_FIELD, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 70, 150, 30));

        FARROWING_BUTTON.setText("SEARCH");
        FARROWING_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FARROWING_BUTTONActionPerformed(evt);
            }
        });
        FARROWING.add(FARROWING_BUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, -1, 30));

        jLabel19.setText("SEARCH EARTAG IF FARROWED");
        FARROWING.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, 270, 30));

        FARROWING_SELECT_BUTTON.setText("SELECT");
        FARROWING_SELECT_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FARROWING_SELECT_BUTTONActionPerformed(evt);
            }
        });
        FARROWING.add(FARROWING_SELECT_BUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, -1, -1));

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FARROWING_DUE.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FARROWING_DUE.setForeground(new java.awt.Color(255, 255, 255));
        FARROWING_DUE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel5.add(FARROWING_DUE, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 40));

        FARROWING.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 200, 40));

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("F");
        FARROWING.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 240, 60, -1));

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("EAR TAG");
        FARROWING.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 200, -1));

        FARROWING_FEMALE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FARROWING_FEMALE.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                FARROWING_FEMALEInputMethodTextChanged(evt);
            }
        });
        FARROWING_FEMALE.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                FARROWING_FEMALEPropertyChange(evt);
            }
        });
        FARROWING.add(FARROWING_FEMALE, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, 60, 30));

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("ACTUAL DATE");
        FARROWING.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 200, -1));

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("M");
        FARROWING.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 60, -1));

        FARROWING_MALE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FARROWING_MALE.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                FARROWING_MALEInputMethodTextChanged(evt);
            }
        });
        FARROWING_MALE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FARROWING_MALEActionPerformed(evt);
            }
        });
        FARROWING_MALE.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                FARROWING_MALEPropertyChange(evt);
            }
        });
        FARROWING.add(FARROWING_MALE, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 60, 30));

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("TOTAL BORN");
        FARROWING.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, 120, -1));

        jPanel6.setBackground(new java.awt.Color(153, 153, 153));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FARROWING_TOTAL_PIGLETS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FARROWING_TOTAL_PIGLETS.setForeground(new java.awt.Color(255, 255, 255));
        FARROWING_TOTAL_PIGLETS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel6.add(FARROWING_TOTAL_PIGLETS, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 40));

        FARROWING.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 190, 40));

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("ABW");
        FARROWING.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 190, -1));

        FARROWING_ABW.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FARROWING.add(FARROWING_ABW, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 190, 40));

        FARROWING_MORT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FARROWING.add(FARROWING_MORT, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, 190, 40));

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("MORT");
        FARROWING.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 190, -1));

        FARROWING_REMARKS.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FARROWING.add(FARROWING_REMARKS, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, 190, 40));

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("REMARKS");
        FARROWING.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, 190, -1));

        FARROWING_SUBMIT_BUTTON.setText("SUBMIT");
        FARROWING_SUBMIT_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FARROWING_SUBMIT_BUTTONActionPerformed(evt);
            }
        });
        FARROWING.add(FARROWING_SUBMIT_BUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 600, 190, 40));
        FARROWING.add(FARROWING_ACTUAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 200, 40));

        jButton9.setText("=");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        FARROWING.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 50, 30));

        jPanel7.setBackground(new java.awt.Color(153, 153, 153));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FARROWING_EARTAG.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FARROWING_EARTAG.setForeground(new java.awt.Color(255, 255, 255));
        FARROWING_EARTAG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel7.add(FARROWING_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 40));

        FARROWING.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 200, 40));

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("DUE DATE");
        FARROWING.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 200, -1));

        FARROWING_DETAILS_CONTAINER.setBackground(new java.awt.Color(153, 153, 153));
        FARROWING_DETAILS_CONTAINER.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton10.setText("START REBREEDING");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        FARROWING_DETAILS_CONTAINER.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, 160, 40));

        FARROWING_MAIN_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(FARROWING_MAIN_TABLE);

        FARROWING_DETAILS_CONTAINER.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 430));

        FARROWING.add(FARROWING_DETAILS_CONTAINER, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 850, 430));

        PAGES.add(FARROWING, "PAGE_3");

        WEANING.setBackground(new java.awt.Color(204, 51, 255));
        WEANING.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        WEANING.add(WEANING_CALENDAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 210, 40));

        WEANING_MALE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WEANING.add(WEANING_MALE, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 70, 40));

        WEANING_FEMALE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WEANING.add(WEANING_FEMALE, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 70, 40));

        jButton6.setText("=");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        WEANING.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 280, 40, -1));

        WEANING_AW.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WEANING.add(WEANING_AW, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 470, 210, 50));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText("EARTAG");
        WEANING.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 80, 30));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("AVERAGE WEIGHT");
        WEANING.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 440, 210, 30));

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("TOTAL");
        WEANING.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 210, 30));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("M");
        WEANING.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, 50, 30));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("CHECK EARTAG IF ALREADY FARROWED");
        WEANING.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 40, 230, 30));

        jButton7.setText("SUBMIT");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        WEANING.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 550, 160, 40));
        WEANING.add(WEANING_SEARCH_FIELD, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 70, 250, 40));

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("F");
        WEANING.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, 50, 30));

        jButton11.setText("CHECK");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        WEANING.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 73, -1, 30));

        WEANING_MAIN_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(WEANING_MAIN_TABLE);

        WEANING.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, 750, 550));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel34.setText("DATE");
        WEANING.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 50, 30));

        WEANING_TOTAL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        WEANING_TOTAL.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WEANING.add(WEANING_TOTAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, 210, 50));

        WEANING_EARTAG.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        WEANING_EARTAG.setForeground(new java.awt.Color(255, 255, 0));
        WEANING_EARTAG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        WEANING_EARTAG.setText("EARTAG HERE");
        WEANING.add(WEANING_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 210, 50));

        PAGES.add(WEANING, "PAGE_4");

        PERFORMANCE.setBackground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout PERFORMANCELayout = new javax.swing.GroupLayout(PERFORMANCE);
        PERFORMANCE.setLayout(PERFORMANCELayout);
        PERFORMANCELayout.setHorizontalGroup(
            PERFORMANCELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1125, Short.MAX_VALUE)
        );
        PERFORMANCELayout.setVerticalGroup(
            PERFORMANCELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 726, Short.MAX_VALUE)
        );

        PAGES.add(PERFORMANCE, "PAGE_5");

        jSplitPane2.setRightComponent(PAGES);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1380, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane2)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // TODO add your handling code here:
        cardLayout.show(PAGES, "PAGE_1");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        cardLayout.show(PAGES, "PAGE_2");

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        cardLayout.show(PAGES, "PAGE_3");

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        cardLayout.show(PAGES, "PAGE_4");

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cardLayout.show(PAGES, "PAGE_5");

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        cardLayout.show(PAGES, "MAIN_PANEL");
    }//GEN-LAST:event_jButton8ActionPerformed

    private void REGSOW_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REGSOW_BUTTONActionPerformed
        // TODO add your handling code here:
        SOW_REGISTRATION();
        REGISTER_RETRIEVE_REGISTERED_SOW();
        
        REGSOW_DATE.setDate(null);
        REGSOW_BNUMBER.setText("");
        LATEST_REGSOW_EARTAG.setText("");
        REGSOW_BUILDING.setSelectedIndex(0);
        REGSOW_ROOM.setSelectedIndex(0);
        
        FETCH_CURRENT_EARTAG();
    }//GEN-LAST:event_REGSOW_BUTTONActionPerformed

    private void ADD_EARTAGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADD_EARTAGActionPerformed
        // TODO add your handling code here:
        String addEartag = CURRENT_REGSOW_EARTAG.getText();
        LATEST_REGSOW_EARTAG.setText(addEartag);
    }//GEN-LAST:event_ADD_EARTAGActionPerformed

    private void BREEDING_SELECT_SOW_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BREEDING_SELECT_SOW_BUTTONActionPerformed
        DefaultTableModel model = (DefaultTableModel) LIST_OF_SOW_BY_BATCH.getModel();
        int selectedRowIndex = LIST_OF_SOW_BY_BATCH.getSelectedRow();

        BREEDING_EARTAG.setText(model.getValueAt(selectedRowIndex, 1).toString());
//        CASHIER_PRICE.setText(model.getValueAt(selectedRowIndex, 1).toString());
    }//GEN-LAST:event_BREEDING_SELECT_SOW_BUTTONActionPerformed

    private void START_BREEDING_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_START_BREEDING_BUTTONActionPerformed
       
        BREEDING_START_BREEDING();
        BREEDING_RETRIEVE_BREEDING_DETAILS();
        
        boolean setNotif = false;
        FETCH_NOTIFICATION(setNotif);
//        FARROWING_NOTIFICATION();
    }//GEN-LAST:event_START_BREEDING_BUTTONActionPerformed

    private void BREEDING_DATEPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_BREEDING_DATEPropertyChange
        // TODO add your handling code here:
        if (evt.getPropertyName().equals("date")) {
                Date selectedDate = null;
            if (BREEDING_DATE.getCalendar() != null) {
                selectedDate = BREEDING_DATE.getCalendar().getTime();
            }

            if (selectedDate != null) {
                Calendar cal = Calendar.getInstance();
                cal.setTime(selectedDate);
                cal.add(Calendar.DAY_OF_MONTH, 1);
//                cal.add(Calendar.MINUTE, 5);
                Date expectedFarrowingDate = cal.getTime();
                String expectedFarrowing = new java.sql.Date(expectedFarrowingDate.getTime()).toString();
                
                BREEDING_EXPECTED_FARROWING.setText(expectedFarrowing);
            } 

            System.out.println("Reydel");

        }
    }//GEN-LAST:event_BREEDING_DATEPropertyChange

    private void FARROWING_MALEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FARROWING_MALEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FARROWING_MALEActionPerformed

    private void FARROWING_SUBMIT_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FARROWING_SUBMIT_BUTTONActionPerformed

        FARROWING_SUBMIT();
        FARROWING_RETRIEVE_DETAILS();
        BREEDING_RETRIEVE_BREEDING_DETAILS();
        
        FARROWING_SEARCH_FIELD.setText("");
        FARROWING_DETAILS_CONTAINER.setVisible(true);
        
        boolean setNotif = false;
        FETCH_NOTIFICATION(setNotif);

    }//GEN-LAST:event_FARROWING_SUBMIT_BUTTONActionPerformed

    private void FARROWING_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FARROWING_BUTTONActionPerformed
        // TODO add your handling code here:
        FARROWING_SEARCH_EARTAG();
        FARROWING_RETRIEVE_DETAILS();
        
        System.out.println(FARROWING_SEARCH_FIELD.getText());
//        FARROWING_SELECT_BUTTON.setEnabled(true);
    }//GEN-LAST:event_FARROWING_BUTTONActionPerformed

    private void FARROWING_SELECT_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FARROWING_SELECT_BUTTONActionPerformed
        DefaultTableModel model = (DefaultTableModel) FARROWING_ONGOING_BREEDING.getModel();
        int selectedRowIndex = FARROWING_ONGOING_BREEDING.getSelectedRow();
        
        FARROWING_EARTAG.setText(model.getValueAt(selectedRowIndex, 0).toString());
        FARROWING_DUE.setText(model.getValueAt(selectedRowIndex, 2).toString());
        FARROWING_RETRIEVE_DETAILS();
    }//GEN-LAST:event_FARROWING_SELECT_BUTTONActionPerformed

    private void FARROWING_MALEPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_FARROWING_MALEPropertyChange

    }//GEN-LAST:event_FARROWING_MALEPropertyChange

    private void FARROWING_FEMALEPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_FARROWING_FEMALEPropertyChange

    }//GEN-LAST:event_FARROWING_FEMALEPropertyChange

    private void FARROWING_MALEInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_FARROWING_MALEInputMethodTextChanged

    }//GEN-LAST:event_FARROWING_MALEInputMethodTextChanged

    private void FARROWING_FEMALEInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_FARROWING_FEMALEInputMethodTextChanged

    }//GEN-LAST:event_FARROWING_FEMALEInputMethodTextChanged

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
        int maleCount = FARROWING_MALE.getText().isEmpty() ? 0 : Integer.parseInt(FARROWING_MALE.getText());
        int femaleCount = FARROWING_FEMALE.getText().isEmpty() ? 0 : Integer.parseInt(FARROWING_FEMALE.getText());
        
        int total = maleCount + femaleCount;
        FARROWING_TOTAL_PIGLETS.setText(Integer.toString(total));

        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        FARROWING_REBREEDING();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void NOTIFICATION_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NOTIFICATION_BUTTONActionPerformed
        boolean setNotif = true;
        FETCH_NOTIFICATION(setNotif);

    }//GEN-LAST:event_NOTIFICATION_BUTTONActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        WEANING_SEARCH_EARTAG();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        WEANING_SUBMIT();
        WEANING_RETRIEVE_DETAILS();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int maleCount = WEANING_MALE.getText().isEmpty() ? 0 : Integer.parseInt(WEANING_MALE.getText());
        int femaleCount = WEANING_FEMALE.getText().isEmpty() ? 0 : Integer.parseInt(WEANING_FEMALE.getText());
        
        int total = maleCount + femaleCount;
        WEANING_TOTAL.setText(Integer.toString(total));
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SECRETARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SECRETARY().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD_EARTAG;
    private javax.swing.JPanel BREEDING;
    private javax.swing.JTextField BREEDING_BOAR_USED;
    private javax.swing.JTextArea BREEDING_COMMENTS;
    private com.toedter.calendar.JDateChooser BREEDING_DATE;
    private javax.swing.JLabel BREEDING_EARTAG;
    private javax.swing.JLabel BREEDING_EXPECTED_FARROWING;
    private javax.swing.JButton BREEDING_SELECT_SOW_BUTTON;
    private javax.swing.JTable BREEDING_TABLE;
    private javax.swing.JPanel CULLED_SOW;
    private javax.swing.JLabel CURRENT_REGSOW_EARTAG;
    private javax.swing.JComboBox<String> DROPDOWN_FOR_BATCH_NUMBER;
    private javax.swing.JPanel EARTAG_CONTAINER;
    private javax.swing.JLabel EARTAG_TITLE;
    private javax.swing.JPanel EXPECTED_FARROWING_LABEL;
    private javax.swing.JPanel FARROWING;
    private javax.swing.JTextField FARROWING_ABW;
    private com.toedter.calendar.JDateChooser FARROWING_ACTUAL;
    private javax.swing.JButton FARROWING_BUTTON;
    private javax.swing.JPanel FARROWING_DETAILS_CONTAINER;
    private javax.swing.JLabel FARROWING_DUE;
    private javax.swing.JLabel FARROWING_EARTAG;
    private javax.swing.JTextField FARROWING_FEMALE;
    private javax.swing.JTable FARROWING_MAIN_TABLE;
    private javax.swing.JTextField FARROWING_MALE;
    private javax.swing.JTextField FARROWING_MORT;
    private javax.swing.JTable FARROWING_ONGOING_BREEDING;
    private javax.swing.JTextField FARROWING_REMARKS;
    private javax.swing.JTextField FARROWING_SEARCH_FIELD;
    private javax.swing.JButton FARROWING_SELECT_BUTTON;
    private javax.swing.JButton FARROWING_SUBMIT_BUTTON;
    private javax.swing.JLabel FARROWING_TOTAL_PIGLETS;
    private javax.swing.JLabel LATEST_REGSOW_EARTAG;
    private javax.swing.JTable LIST_OF_SOW_BY_BATCH;
    private javax.swing.JPanel MAIN_PANEL;
    private javax.swing.JButton NOTIFICATION_BUTTON;
    private javax.swing.JLabel NUMBER_OF_NOTIFICATION;
    private javax.swing.JPanel PAGES;
    private javax.swing.JPanel PERFORMANCE;
    private javax.swing.JPanel REGISTER_OF_SOW;
    private javax.swing.JTextField REGSOW_BNUMBER;
    private javax.swing.JComboBox<String> REGSOW_BUILDING;
    private javax.swing.JButton REGSOW_BUTTON;
    private com.toedter.calendar.JDateChooser REGSOW_DATE;
    private javax.swing.JComboBox<String> REGSOW_ROOM;
    private javax.swing.JTable REGSOW_TABLE;
    private javax.swing.JButton START_BREEDING_BUTTON;
    private javax.swing.JPanel WEANING;
    private javax.swing.JTextField WEANING_AW;
    private com.toedter.calendar.JDateChooser WEANING_CALENDAR;
    private javax.swing.JLabel WEANING_EARTAG;
    private javax.swing.JTextField WEANING_FEMALE;
    private javax.swing.JTable WEANING_MAIN_TABLE;
    private javax.swing.JTextField WEANING_MALE;
    private javax.swing.JTextField WEANING_SEARCH_FIELD;
    private javax.swing.JTextField WEANING_TOTAL;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSplitPane jSplitPane2;
    // End of variables declaration//GEN-END:variables

    
    private void SOW_REGISTRATION(){
        
        try{
            
            Date selectedDate = REGSOW_DATE.getDate();
            String dateString = new java.sql.Date(selectedDate.getTime()).toString();
//                
//            System.out.println(dateString);
            
            String sql = "INSERT INTO register_sow (eartag, date, bnumber, penbuilding, penroom) VALUES (?, ?, ?, ?, ?)";
            
            pst = conn.prepareStatement(sql);
            pst.setString(1, LATEST_REGSOW_EARTAG.getText());
            pst.setString(2, dateString);
            pst.setString(3, REGSOW_BNUMBER.getText());
            pst.setString(4, (String) REGSOW_BUILDING.getSelectedItem());
            pst.setString(5, (String) REGSOW_ROOM.getSelectedItem());
            pst.execute();
             
//            JOptionPane.showMessageDialog(null, ADMIN_REGISTRATION_TYPE.getSelectedItem() + " Registered Succesfully");

            
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
    private void FETCH_CURRENT_EARTAG() {
        try {
            String currentEartagQuery = "SELECT eartag, MAX(eartag) AS highest_eartag FROM register_sow";
            pst = conn.prepareStatement(currentEartagQuery);

        
            rs = pst.executeQuery();
            

            if (rs.next()) {
                int currentEartag;
                if (rs.getObject("highest_eartag") == null) {
                    currentEartag = 5000;
                } else {
                    currentEartag = rs.getInt("highest_eartag") + 1;
                }

                String currentEartagStr = String.valueOf(currentEartag);
                CURRENT_REGSOW_EARTAG.setText(currentEartagStr);
            }

        } catch (SQLException e){
           JOptionPane.showMessageDialog(null,e);

        }
    }
    
    private void REGISTER_RETRIEVE_REGISTERED_SOW(){
        
        try{
            DefaultTableModel model = new DefaultTableModel();

            
            String query = "SELECT id, eartag, date, bnumber, penbuilding, penroom FROM register_sow";
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            
            model.addColumn("ID");
            model.addColumn("EARTAG");
            model.addColumn("DATE");
            model.addColumn("BNUMBER");
            model.addColumn("PBUILDING");
            model.addColumn("PROOM");

            
            while (rs.next()) {
            int id = rs.getInt("id");
            int eartag = rs.getInt("eartag");
            Date date = rs.getDate("date");
            String bnumber = rs.getString("bnumber");
            String penbuilding = rs.getString("penbuilding");
            String penroom = rs.getString("penroom");

            model.addRow(new Object[]{id, eartag, date, bnumber, penbuilding, penroom});
        }

             if(REGSOW_TABLE != null){
                REGSOW_TABLE.setModel(model);
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
        
    private void BREEDING_FETCH_VALUE_FROM_BATCH_NUMBER(){

            try{

            String sql = "SELECT bnumber FROM register_sow";
            pst = conn.prepareStatement(sql);


            rs = pst.executeQuery();


            while (rs.next()) {
                String categoryName = rs.getString("bnumber");
                DROPDOWN_FOR_BATCH_NUMBER.addItem(categoryName);
             }

            // Attach an ActionListener to the combobox
            DROPDOWN_FOR_BATCH_NUMBER.addActionListener(new ActionListener() {
              public void actionPerformed(ActionEvent e) {
                BREEDING_RETRIEVE_SOW_BY_BATCH_NUMBER();
                BREEDING_SELECT_SOW_BUTTON.setEnabled(true);
              }
            });

            } catch (Exception e){
                 JOptionPane.showMessageDialog(null,e);

            }
        }
    
    private void BREEDING_RETRIEVE_SOW_BY_BATCH_NUMBER(){
        try{
            DefaultTableModel model = new DefaultTableModel();

            // Get the selected item from the dropdown
            String selectedBatchNumber = (String)DROPDOWN_FOR_BATCH_NUMBER.getSelectedItem();

            String query = "SELECT id, eartag, date, bnumber, penbuilding, penroom FROM register_sow WHERE bnumber = ?";
            pst = conn.prepareStatement(query);
            pst.setString(1, selectedBatchNumber); 
            rs = pst.executeQuery();

            model.addColumn("ID");
            model.addColumn("EARTAG");
//            model.addColumn("DATE");
            model.addColumn("BNUMBER");
//            model.addColumn("PBUILDING");
//            model.addColumn("PROOM");

            while (rs.next()) {
                int id = rs.getInt("id");
                int eartag = rs.getInt("eartag");
//                Date date = rs.getDate("date");
                String bnumber = rs.getString("bnumber");
//                String penbuilding = rs.getString("penbuilding");
//                String penroom = rs.getString("penroom");

//                model.addRow(new Object[]{id, eartag, date, bnumber, penbuilding, penroom});
                model.addRow(new Object[]{id, eartag, bnumber});

            }

            if(LIST_OF_SOW_BY_BATCH != null){
                LIST_OF_SOW_BY_BATCH.setModel(model);
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
    
//    BREEDING 
                   
     private void BREEDING_START_BREEDING(){
        
        try{
            boolean isBreeding = false;
            Date selectedDate = BREEDING_DATE.getDate();
            String dateString = new java.sql.Date(selectedDate.getTime()).toString();
            
            
            String sql = "INSERT INTO breeding (eartag, boar_used, breeding_date, expected_farrowing, comments, farrowed) VALUES (?, ?, ?, ?, ?, ?)";
            
            String selectSql = "SELECT farrowed FROM breeding WHERE eartag = ?";
            pst = conn.prepareStatement(selectSql);
            pst.setString(1, BREEDING_EARTAG.getText());
            rs = pst.executeQuery();
            if (rs.next() && rs.getBoolean("farrowed")) {
                JOptionPane.showMessageDialog(null, BREEDING_EARTAG.getText() + " has already been marked as farrowed.");
                BREEDING_EARTAG.setText("");
                BREEDING_BOAR_USED.setText("");
                BREEDING_DATE.setDate(null); 
                BREEDING_EXPECTED_FARROWING.setText("");
                BREEDING_COMMENTS.setText("");
                
                return;
            }

            
            pst = conn.prepareStatement(sql);
            pst.setString(1, BREEDING_EARTAG.getText());
            pst.setString(2, BREEDING_BOAR_USED.getText());
            pst.setString(3, dateString);
            pst.setString(4, BREEDING_EXPECTED_FARROWING.getText());
            pst.setString(5, BREEDING_COMMENTS.getText());
            pst.setBoolean(6, isBreeding);
            
            pst.execute();
             
            JOptionPane.showMessageDialog(null, BREEDING_EARTAG.getText() + " Started Breeding");
            

            BREEDING_EARTAG.setText("");
            BREEDING_BOAR_USED.setText("");
            BREEDING_DATE.setDate(null); 
            BREEDING_EXPECTED_FARROWING.setText("");
            BREEDING_COMMENTS.setText("");
            

            
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }

    private void BREEDING_RETRIEVE_BREEDING_DETAILS(){
        
        try{
            DefaultTableModel model = new DefaultTableModel();

            
            String query = "SELECT eartag, boar_used, breeding_date, expected_farrowing, comments, farrowed FROM breeding";
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            
            model.addColumn("EARTAG");
            model.addColumn("boar_used");
            model.addColumn("breeding_date");
            model.addColumn("expected_farrowing");
            model.addColumn("comments");
            model.addColumn("status");


            
            while (rs.next()) {
                int eartag = rs.getInt("eartag");
                Date breeding_date = rs.getDate("breeding_date");
                String boar_used = rs.getString("boar_used");
                Date expected_farrowing = rs.getDate("expected_farrowing");
                String comments = rs.getString("comments");
                int isFarrowed = rs.getInt("farrowed");
                String status = isFarrowed == 1 ? "farrowed" : "not farrowed";

            model.addRow(new Object[]{eartag, boar_used, breeding_date, expected_farrowing, comments, status});
        }

             if(BREEDING_TABLE != null){
                BREEDING_TABLE.setModel(model);
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
    
    
//    FARROWING 
    
private void FARROWING_SEARCH_EARTAG() {
    try {
        DefaultTableModel model = new DefaultTableModel();

        String searchValue = FARROWING_SEARCH_FIELD.getText();
        String query = "SELECT * FROM breeding WHERE eartag = ?";
        
        pst = conn.prepareStatement(query);
        pst.setString(1, searchValue);
        
        rs = pst.executeQuery();

        model.addColumn("eartag");
        model.addColumn("boar_used");
        model.addColumn("expected_farrowing");

        if(rs.next()) {
            int eartag = rs.getInt("eartag");
            String boar_used = rs.getString("boar_used");
            Date expected_farrowing = rs.getDate("expected_farrowing");
            boolean farrowed = rs.getBoolean("farrowed");

            model.addRow(new Object[]{eartag, boar_used, expected_farrowing});

            // Check if the sow has already farrowed
            if (farrowed) {
                JOptionPane.showMessageDialog(null, "This sow has already farrowed");
                FARROWING_RETRIEVE_DETAILS();
                FARROWING_SELECT_BUTTON.setEnabled(false);
                FARROWING_DETAILS_CONTAINER.setVisible(true);
            } else {
                FARROWING_SELECT_BUTTON.setEnabled(true);
            }
            
        } else {
            JOptionPane.showMessageDialog(null, "No result found");
            FARROWING_RETRIEVE_DETAILS();
            FARROWING_DETAILS_CONTAINER.setVisible(false);
        }

        if(FARROWING_ONGOING_BREEDING != null) {
            FARROWING_ONGOING_BREEDING.setModel(model);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null,e);
    }
}


    
     private void FARROWING_SUBMIT(){
        
        try{
//            isBreeding = true;
            Date selectedDate = FARROWING_ACTUAL.getDate();
            String dateString = new java.sql.Date(selectedDate.getTime()).toString();
            
            
            String sql = "INSERT INTO farrowing_records (eartag, farrowing_actualdate, farrowing_duedate, female_piglets, male_piglets, total_piglets, abw, mortality, remarks) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            
            pst = conn.prepareStatement(sql);
            pst.setString(1, FARROWING_EARTAG.getText());
            pst.setString(2, dateString);
            pst.setString(3, FARROWING_DUE.getText());
            pst.setString(4, FARROWING_FEMALE.getText());
            pst.setString(5, FARROWING_MALE.getText());
            pst.setString(6, FARROWING_TOTAL_PIGLETS.getText());
            pst.setDouble(7, Double.parseDouble(FARROWING_ABW.getText()));
            pst.setString(8, FARROWING_MORT.getText());
            pst.setString(9, FARROWING_REMARKS.getText());
            
            pst.execute();
            
            // Update breeding record
            String updateSql = "UPDATE breeding SET farrowed = true WHERE eartag = ?";
            pst = conn.prepareStatement(updateSql);
            pst.setString(1, FARROWING_EARTAG.getText());
            pst.execute();
             
            JOptionPane.showMessageDialog(null, FARROWING_EARTAG.getText() + " EARTAG DETAILS ARE UPLOADED");
            
            BREEDING_RETRIEVE_BREEDING_DETAILS();

            FARROWING_EARTAG.setText("");
            FARROWING_DUE.setText("");
            FARROWING_ACTUAL.setDate(null);
            FARROWING_FEMALE.setText("");
            FARROWING_MALE.setText("");
            FARROWING_TOTAL_PIGLETS.setText("");
            FARROWING_ABW.setText("");
            FARROWING_MORT.setText("");
            FARROWING_REMARKS.setText("");

            

            
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
     
    private void FARROWING_RETRIEVE_DETAILS(){

        try{
            DefaultTableModel model = new DefaultTableModel();


            String query = "SELECT eartag, farrowing_actualdate, farrowing_duedate, female_piglets, male_piglets, total_piglets, abw, mortality, remarks FROM farrowing_records WHERE eartag = ?";
            pst = conn.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(FARROWING_SEARCH_FIELD.getText())); // assuming the eartag is an integer
            rs = pst.executeQuery();

            model.addColumn("eartag");
            model.addColumn("farrowing_actualdate");
            model.addColumn("farrowing_duedate");
            model.addColumn("female_piglets");
            model.addColumn("male_piglets");
            model.addColumn("total_piglets");
            model.addColumn("abw");
            model.addColumn("mortality");
            model.addColumn("remarks");



            while (rs.next()) {
                int eartag = rs.getInt("eartag");
                Date farrowing_actualdate = rs.getDate("farrowing_actualdate");
                Date farrowing_duedate = rs.getDate("farrowing_duedate");
                int female_piglets = rs.getInt("female_piglets");
                int male_piglets = rs.getInt("male_piglets");
                int total_piglets = rs.getInt("total_piglets");
                double abw = rs.getDouble("abw");
                int mortality = rs.getInt("mortality");
                String remarks = rs.getString("remarks");
    
//                FARROWING_DETAILS_EARTAG.setText(String.valueOf(rs.getInt("eartag")));
//                FARROWING_DETAILS_ACTUAL_DATE.setText(rs.getDate("farrowing_actualdate").toString());
//                FARROWING_DETAILS_DUE_DATE.setText(rs.getDate("farrowing_duedate").toString());
//                FARROWING_DETAILS_FEMALE_PIGLETS.setText(String.valueOf(rs.getInt("female_piglets")));
//                FARROWING_DETAILS_MALE_PIGLETS.setText(String.valueOf(rs.getInt("male_piglets")));
//                FARROWING_DETAILS_TOTAL_PIGLETS.setText(String.valueOf(rs.getInt("total_piglets")));
//                FARROWING_DETAILS_ABW.setText(String.valueOf(rs.getDouble("abw")));
//                FARROWING_DETAILS_MORTALITY.setText(String.valueOf(rs.getInt("mortality")));
//                FARROWING_DETAILS_REMARKS.setText(rs.getString("remarks"));



                model.addRow(new Object[]{eartag, farrowing_actualdate, farrowing_duedate, female_piglets, male_piglets, total_piglets, abw, mortality, remarks});
            }

             if(FARROWING_MAIN_TABLE != null){
                FARROWING_MAIN_TABLE.setModel(model);
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }

    private void FARROWING_REBREEDING(){
        try{

            Date currentDate = new Date(); // current date
            Calendar cal = Calendar.getInstance();
            cal.setTime(currentDate);
            cal.add(Calendar.DAY_OF_MONTH, 1);
            Date expectedFarrowingDate = cal.getTime();
            String expectedFarrowing = new java.sql.Date(expectedFarrowingDate.getTime()).toString();
            String dateString = new java.sql.Date(currentDate.getTime()).toString(); 
                
            String updateSql = "UPDATE breeding SET farrowed = false, expected_farrowing = ?, breeding_date = ? WHERE eartag = ?";
            pst = conn.prepareStatement(updateSql);
            pst.setString(1, expectedFarrowing);
            pst.setString(2, dateString);
            pst.setString(3, FARROWING_SEARCH_FIELD.getText());
            pst.executeUpdate();
             
            JOptionPane.showMessageDialog(null, FARROWING_SEARCH_FIELD.getText() + " EARTAG IS NOW REBREEDING");
//            FARROWING_SEARCH_FIELD.setText("");
            
            BREEDING_RETRIEVE_BREEDING_DETAILS();
            FARROWING_RETRIEVE_DETAILS();
//            FARROWING_SEARCH_EARTAG();
            
        }catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
    
    
    //    WEANING 
    
    
    private void WEANING_SEARCH_EARTAG() {
        try {
            DefaultTableModel model = new DefaultTableModel();

            String searchValue = WEANING_SEARCH_FIELD.getText();
            String query = "SELECT * FROM breeding WHERE eartag = ?";

            pst = conn.prepareStatement(query);
            pst.setString(1, searchValue);

            rs = pst.executeQuery();

            model.addColumn("eartag");
            model.addColumn("farrowed");

            if(rs.next()) {
                int eartag = rs.getInt("eartag");
                boolean farrowed = rs.getBoolean("farrowed");

                model.addRow(new Object[]{eartag, farrowed});

                // Check if the sow has already farrowed
                if (farrowed) {
                    JOptionPane.showMessageDialog(null, "This sow has already farrowed");
                    WEANING_EARTAG.setText(String.valueOf(eartag));
//                    FARROWING_RETRIEVE_DETAILS();
//                    FARROWING_SELECT_BUTTON.setEnabled(false);
//                    FARROWING_DETAILS_CONTAINER.setVisible(true);
                } else {
//                    FARROWING_SELECT_BUTTON.setEnabled(true);
                }

            } else {
                JOptionPane.showMessageDialog(null, "No result found");
//                FARROWING_RETRIEVE_DETAILS();
//                FARROWING_DETAILS_CONTAINER.setVisible(false);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
    }


    
     private void WEANING_SUBMIT(){
        
        try{
//            isBreeding = true;
            Date selectedDate = WEANING_CALENDAR.getDate();
            String dateString = new java.sql.Date(selectedDate.getTime()).toString();
            
            
            String sql = "INSERT INTO weaning_records (eartag, weaning_actualdate, male_piglets, female_piglets, total_piglets, aw) VALUES (?, ?, ?, ?, ?, ?)";
            
            pst = conn.prepareStatement(sql);
            pst.setString(1, WEANING_EARTAG.getText());
            pst.setString(2, dateString);
            pst.setString(3, WEANING_MALE.getText());
            pst.setString(4, WEANING_FEMALE.getText());
            pst.setString(5, WEANING_TOTAL.getText());
            pst.setDouble(6, Double.parseDouble(WEANING_AW.getText()));
            
            pst.execute();
            

//            String updateSql = "UPDATE breeding SET farrowed = true WHERE eartag = ?";
//            pst = conn.prepareStatement(updateSql);
//            pst.setString(1, FARROWING_EARTAG.getText());
//            pst.execute();
             
            JOptionPane.showMessageDialog(null, FARROWING_EARTAG.getText() + " EARTAG WEANING DETAILS ARE RECORDED");
            
            BREEDING_RETRIEVE_BREEDING_DETAILS();

            WEANING_EARTAG.setText("");
            WEANING_CALENDAR.setDate(null);
            WEANING_FEMALE.setText("");
            WEANING_MALE.setText("");
            WEANING_TOTAL.setText("");
            WEANING_AW.setText("");

            

            
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
     
    private void WEANING_RETRIEVE_DETAILS(){

        try {
            DefaultTableModel model = new DefaultTableModel();
            String query = "SELECT eartag, weaning_actualdate, male_piglets, female_piglets, total_piglets, aw FROM weaning_records";
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            if (rs.next()) {
                int eartag = rs.getInt("eartag");
                Date weaning_actualdate = rs.getDate("weaning_actualdate");
                int male_piglets = rs.getInt("male_piglets");
                int female_piglets = rs.getInt("female_piglets");
                int total_piglets = rs.getInt("total_piglets");
                double aw = rs.getDouble("aw");
                
                model.addColumn("eartag");
                model.addColumn("weaning_actualdate");
                model.addColumn("male_piglets");
                model.addColumn("female_piglets");
                model.addColumn("total_piglets");
                model.addColumn("aw");
                
                model.addRow(new Object[]{eartag, weaning_actualdate, male_piglets, female_piglets, total_piglets, aw});
            } else {
                JOptionPane.showMessageDialog(null, "No record found");
            }
            WEANING_MAIN_TABLE.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    
   
    private void FETCH_NOTIFICATION(boolean showNotif) {
            Map<String, String> farrowingNotifications = new HashMap<>();
            Map<String, String> remarksNotifications = new HashMap<>();
            int numberOfNotification = 0;
            int remarksCount = 0;

            try {
                String sql = "SELECT eartag, expected_farrowing FROM breeding";
                String sqlForRemarks = "SELECT remarks FROM farrowing_records";
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                
                
                
                PreparedStatement pstForRemarks = conn.prepareStatement(sqlForRemarks);
                ResultSet rsForRemarks = pstForRemarks.executeQuery();


                while (rs.next()) {
                    String eartag = rs.getString("eartag");
                    LocalDate expectedFarrowing = rs.getDate("expected_farrowing").toLocalDate();
                    LocalDate today = LocalDate.now();
                    long daysUntilFarrowing = ChronoUnit.DAYS.between(today, expectedFarrowing);
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM d, yyyy");
                    String formattedDate = expectedFarrowing.format(formatter);
                    
                    System.out.println(daysUntilFarrowing+"dasd");

                    remarksCount = 0; 

     
                    while (rsForRemarks.next()) {
                        String remarks = rsForRemarks.getString("remarks");
                        if (remarks != null && !remarks.trim().isEmpty()) {
                            String[] remarksArr = remarks.split(",");
                            for (String remark : remarksArr) {
                                if (remark.trim().length() > 0) {
                                    remarksCount++;
                                }
                            }
                        }
                    }


                    if (remarksCount >= 3) {
                        if (remarksNotifications.containsKey(eartag)) {
                            remarksNotifications.put(eartag, remarksNotifications.get(eartag) + "Remarks for " + eartag + " have reached 3.\n");
                        } else {
                            remarksNotifications.put(eartag, "Remarks for " + eartag + " have reached 3.\n");
                        }
                        numberOfNotification++;
                    }

                    String notificationMessage = "";

                    if (daysUntilFarrowing == 0) {
                        notificationMessage = "Farrowing is happening today on " + formattedDate + "!";
                    } else if (daysUntilFarrowing == 1) {
                        notificationMessage = "Farrowing is expected soon on " + formattedDate + "!";
                    } else if (daysUntilFarrowing < 5) {
                        notificationMessage = "Farrowing is expected soon on " + formattedDate + "!";
                    }

                    if (!notificationMessage.isEmpty()) {
                        if (farrowingNotifications.containsKey(eartag)) {
                            if (!farrowingNotifications.get(eartag).contains(notificationMessage)) {
                                farrowingNotifications.put(eartag, farrowingNotifications.get(eartag) + "\n" + notificationMessage);
                                numberOfNotification++;
                            }
                        } else {
                            farrowingNotifications.put(eartag, notificationMessage);
                            numberOfNotification++;
                        }
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }

            NUMBER_OF_NOTIFICATION.setText(Integer.toString(numberOfNotification));

            if (showNotif) {
                showNotificationDialog(farrowingNotifications, remarksNotifications);
            }
        }

    private void showNotificationDialog(Map<String, String> farrowingNotifications, Map<String, String> remarksNotifications) {
            JDialog notificationDialog = new JDialog(this, "Notification", true);
            notificationDialog.setSize(500, 500);
            notificationDialog.setLayout(new BorderLayout());

            JTabbedPane tabbedPane = new JTabbedPane();

            // Create the farrowing notifications tab
            JPanel farrowingPanel = new JPanel(new BorderLayout());
            DefaultListModel<String> farrowingListModel = new DefaultListModel<>();
            JList<String> farrowingList = new JList<>(farrowingListModel);
            farrowingList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            // Add the farrowing notifications to the list
            for (Map.Entry<String, String> entry : farrowingNotifications.entrySet()) {
                farrowingListModel.addElement(entry.getKey() + " - " + entry.getValue());
            }

            // Add the farrowing list to the panel
            farrowingPanel.add(new JScrollPane(farrowingList), BorderLayout.CENTER);

            // Create the remarks notifications tab
            JPanel remarksPanel = new JPanel(new BorderLayout());
            DefaultListModel<String> remarksListModel = new DefaultListModel<>();
            JList<String> remarksList = new JList<>(remarksListModel);
            remarksList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            // Add the remarks notifications to the list
            for (Map.Entry<String, String> entry : remarksNotifications.entrySet()) {
                remarksListModel.addElement(entry.getKey() + " - " + entry.getValue());
            }

            // Add the remarks list to the panel
            remarksPanel.add(new JScrollPane(remarksList), BorderLayout.CENTER);

            // Add the tabs to the tabbed pane
            tabbedPane.addTab("Farrowing (" + farrowingNotifications.size() + ")", farrowingPanel);
            tabbedPane.addTab("Remarks (" + remarksNotifications.size() + ")", remarksPanel);


            // Add the tabbed pane to the dialog
            notificationDialog.add(tabbedPane, BorderLayout.CENTER);

            // Display the dialog
            notificationDialog.setVisible(true);
        }





      

}
