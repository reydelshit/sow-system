
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Reydel
 */
public final class REGISTER_UPDATEMODAL extends javax.swing.JFrame {

    private String eartag;

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    /**
     * Creates new form REGISTER_UPDATEMODAL
     */
    public REGISTER_UPDATEMODAL() {
        setUndecorated(true);
        conn = DBConnection.getConnection();

        initComponents();

//        setEartag(eartag);
//
//        REGISTER_RETRIEVE_REGISTERED_SOW();
        BREEDING_FETCH_VALUE_FROM_BATCH_NUMBER_TO_USE_IN_REG_SOW();
        REGISTER_FETCH_ASSIGNED_EMPLOYEE();
    }

//    public void setEartag(String eartag) {
//        this.eartag = eartag;
//        REGSOW_EARTAG.setText(eartag);
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        REGSOW_DATE = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        REGSOW_BUILDING = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        REGSOW_PEN = new javax.swing.JTextField();
        rSButtonHover10 = new rojeru_san.complementos.RSButtonHover();
        REGSOW_BNUMBER = new javax.swing.JComboBox<>();
        REGSOW_EARTAG = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        rSButtonHover12 = new rojeru_san.complementos.RSButtonHover();
        REGSOW_ASSIGNED_EMPLOYEE = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(26, 46, 53));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(REGSOW_DATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 190, 40));

        jLabel1.setForeground(new java.awt.Color(255, 217, 90));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DATE");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 50, -1));

        jLabel4.setForeground(new java.awt.Color(255, 217, 90));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("BUILDING");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 70, -1));

        REGSOW_BUILDING.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        jPanel2.add(REGSOW_BUILDING, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 80, 30));

        jLabel5.setForeground(new java.awt.Color(255, 217, 90));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("PEN");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 70, -1));

        jLabel2.setForeground(new java.awt.Color(255, 217, 90));
        jLabel2.setText("ASSIGNED EMPLOYEE");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, -1, -1));

        jLabel6.setForeground(new java.awt.Color(255, 217, 90));
        jLabel6.setText("EARTAG");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, -1, -1));

        REGSOW_PEN.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(REGSOW_PEN, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 210, 80, 30));

        rSButtonHover10.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover10.setText("UPDATE");
        rSButtonHover10.setColorHover(new java.awt.Color(255, 217, 90));
        rSButtonHover10.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover10.setColorTextHover(new java.awt.Color(26, 46, 53));
        rSButtonHover10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover10ActionPerformed(evt);
            }
        });
        jPanel2.add(rSButtonHover10, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, 190, -1));

        REGSOW_BNUMBER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REGSOW_BNUMBERActionPerformed(evt);
            }
        });
        jPanel2.add(REGSOW_BNUMBER, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 340, 190, 40));

        REGSOW_EARTAG.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(REGSOW_EARTAG, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 190, 40));

        jLabel7.setForeground(new java.awt.Color(255, 217, 90));
        jLabel7.setText("BATCH NUMBER");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, -1, -1));

        rSButtonHover12.setBackground(new java.awt.Color(255, 51, 51));
        rSButtonHover12.setText("CANCEL");
        rSButtonHover12.setColorHover(new java.awt.Color(255, 217, 90));
        rSButtonHover12.setColorText(new java.awt.Color(26, 46, 53));
        rSButtonHover12.setColorTextHover(new java.awt.Color(26, 46, 53));
        rSButtonHover12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonHover12ActionPerformed(evt);
            }
        });
        jPanel2.add(rSButtonHover12, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 450, 110, 40));

        jPanel2.add(REGSOW_ASSIGNED_EMPLOYEE, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 190, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 530));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonHover10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover10ActionPerformed

        String pen = REGSOW_PEN.getText().trim();
        String employee = (String) REGSOW_ASSIGNED_EMPLOYEE.getSelectedItem();
        String bNumber = (String) REGSOW_BNUMBER.getSelectedItem();

        if (!pen.isEmpty() && !pen.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Invalid input for pen. Please make sure it is a number.", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!employee.isEmpty() && !employee.matches("^[a-zA-Z ]+$")) {
            JOptionPane.showMessageDialog(null, "Invalid input for employee. Please make sure it contains only alphabets.", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!bNumber.isEmpty() && !bNumber.matches("^[a-zA-Z0-9]+$")) {
            JOptionPane.showMessageDialog(null, "Invalid input for bNumber. Please make sure it contains letters and numbers only.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            REGISTER_UPDATE_REGISTERED_SOW();

//            REGSOW_DATE.setDate(null);
//
//            REGSOW_EARTAG.setText("");
//            REGSOW_BUILDING.setSelectedIndex(0);
//            REGSOW_ASSIGNED_EMPLOYEE.setSelectedIndex(0);
//            REGSOW_PEN.setText("");
        }
    }//GEN-LAST:event_rSButtonHover10ActionPerformed

    private void REGSOW_BNUMBERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REGSOW_BNUMBERActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_REGSOW_BNUMBERActionPerformed

    private void rSButtonHover12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonHover12ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_rSButtonHover12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(REGISTER_UPDATEMODAL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(REGISTER_UPDATEMODAL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(REGISTER_UPDATEMODAL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(REGISTER_UPDATEMODAL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new REGISTER_UPDATEMODAL().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> REGSOW_ASSIGNED_EMPLOYEE;
    private javax.swing.JComboBox<String> REGSOW_BNUMBER;
    private javax.swing.JComboBox<String> REGSOW_BUILDING;
    private com.toedter.calendar.JDateChooser REGSOW_DATE;
    private javax.swing.JTextField REGSOW_EARTAG;
    private javax.swing.JTextField REGSOW_PEN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private rojeru_san.complementos.RSButtonHover rSButtonHover10;
    private rojeru_san.complementos.RSButtonHover rSButtonHover12;
    // End of variables declaration//GEN-END:variables

    public void REGISTER_RETRIEVE_REGISTERED_SOW(String eartag) {
        REGSOW_EARTAG.setText(eartag);
        try {
            String query = "SELECT eartag, date, bnumber, penbuilding, penroom, assigned_employee FROM register_sow WHERE eartag = ?";
            pst = conn.prepareStatement(query);
            pst.setString(1, eartag);
            rs = pst.executeQuery();

            while (rs.next()) {

                Date date = rs.getDate("date");
                String bnumber = rs.getString("bnumber");
                String penbuilding = rs.getString("penbuilding");
                String penroom = rs.getString("penroom");
                String assignedEmployee = rs.getString("assigned_employee");

                REGSOW_EARTAG.setText(String.valueOf(eartag));
                REGSOW_DATE.setDate(date);
                REGSOW_BNUMBER.setSelectedItem(bnumber);
                REGSOW_BUILDING.setSelectedItem(penbuilding);
                REGSOW_PEN.setText(penroom);
                REGSOW_ASSIGNED_EMPLOYEE.setSelectedItem(assignedEmployee);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void REGISTER_FETCH_ASSIGNED_EMPLOYEE() {
        try {
            String sql = "SELECT DISTINCT assigned_employee FROM register_sow";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {
                String batchNumber = rs.getString("assigned_employee");
                REGSOW_ASSIGNED_EMPLOYEE.addItem(batchNumber);
            }

            REGSOW_ASSIGNED_EMPLOYEE.addItem("Add Employee?"); // Add "Add Batch" option

            REGSOW_ASSIGNED_EMPLOYEE.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    Object selectedBatch = REGSOW_ASSIGNED_EMPLOYEE.getSelectedItem();
                    if (selectedBatch.equals("Add Employee?")) {
                        try {
                            String newBatch = JOptionPane.showInputDialog("Enter a new employee:");

                            REGSOW_ASSIGNED_EMPLOYEE.addItem(newBatch);
                            REGSOW_ASSIGNED_EMPLOYEE.setSelectedItem(newBatch);
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    }
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void BREEDING_FETCH_VALUE_FROM_BATCH_NUMBER_TO_USE_IN_REG_SOW() {
        try {
            String sql = "SELECT DISTINCT bnumber FROM register_sow";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {
                String batchNumber = rs.getString("bnumber");
                REGSOW_BNUMBER.addItem(batchNumber);
            }

            REGSOW_BNUMBER.addItem("Add Batch?");

            REGSOW_BNUMBER.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    Object selectedBatch = REGSOW_BNUMBER.getSelectedItem();
                    if (selectedBatch.equals("Add Batch?")) {
                        try {
                            String newBatch = JOptionPane.showInputDialog("Enter a new batch number:");

                            REGSOW_BNUMBER.addItem(newBatch);
                            REGSOW_BNUMBER.setSelectedItem(newBatch);
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    }
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void REGISTER_UPDATE_REGISTERED_SOW() {
        try {
            String query = "UPDATE register_sow SET date = ?, bnumber = ?, penbuilding = ?, penroom = ?, assigned_employee = ? WHERE eartag = ?";
            pst = conn.prepareStatement(query);

            pst.setDate(1, new java.sql.Date(REGSOW_DATE.getDate().getTime()));
            pst.setString(2, REGSOW_BNUMBER.getSelectedItem().toString());
            pst.setString(3, REGSOW_BUILDING.getSelectedItem().toString());
            pst.setString(4, REGSOW_PEN.getText());
            pst.setString(5, REGSOW_ASSIGNED_EMPLOYEE.getSelectedItem().toString());
            pst.setString(6, REGSOW_EARTAG.getText());

            int rowsUpdated = pst.executeUpdate();
            if (rowsUpdated > 0) {

                JOptionPane.showMessageDialog(null, "Updated successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update sow.");
            }

            REGSOW_DATE.setDate(null);
            REGSOW_BNUMBER.setSelectedIndex(0);
            REGSOW_BUILDING.setSelectedIndex(0);
            REGSOW_PEN.setText("");
            REGSOW_ASSIGNED_EMPLOYEE.setSelectedIndex(0);
            REGSOW_EARTAG.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

}
